<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Microsoft 365 E5订阅 office 与自动续订</title>
      <link href="/2023/03/25/tools/keep-alive-e5/"/>
      <url>/2023/03/25/tools/keep-alive-e5/</url>
      
        <content type="html"><![CDATA[<h1 id="Microsoft-365-E5-订阅-office-与自动续订"><a href="#Microsoft-365-E5-订阅-office-与自动续订" class="headerlink" title="Microsoft 365 E5 订阅 office 与自动续订"></a><code>Microsoft 365 E5</code> 订阅 <code>office</code> 与自动续订</h1><blockquote><p>说明：使用<code>Microsoft 365 E5</code>免费订阅<code>office</code>以及通过<code>github</code>的<code>KeepAliveE5</code>项目定时续期</p></blockquote><h2 id="注册与激活E5账号"><a href="#注册与激活E5账号" class="headerlink" title="注册与激活E5账号"></a>注册与激活<code>E5</code>账号</h2><blockquote><p>注意：下述操作涉及到登录微软官方地址，中途需要使用到谷歌的人机验证，请自行准备好网络环境来访问这些官网。同时需要准备一个微软账号，且安装的时候确保电脑当中没有 <code>office</code>产品，以免安装 <code>microsoft 365</code>失败</p></blockquote><ol><li><p>首先来到<code>microsoft 365</code> 开发人员中心的<a href="https://developer.microsoft.com/en-us/microsoft-365/dev-program">官网</a>：<a href="https://developer.microsoft.com/en-us/microsoft-365/dev-program%EF%BC%8C%E5%A6%82%E4%B8%8B%E5%9B%BE%EF%BC%8C%E9%80%89%E6%8B%A9%E7%AB%8B%E5%8D%B3%E5%8A%A0%E5%85%A5">https://developer.microsoft.com/en-us/microsoft-365/dev-program，如下图，选择立即加入</a></p><img src="/2023/03/25/tools/keep-alive-e5/join_e5.png" class="" title="join_e5"></li><li><p>之后会跳转到需要登陆<code>microsoft</code>账号页面，选择登录账号.</p><img src="/2023/03/25/tools/keep-alive-e5/sign_in_microsoft_account.png" class="" title="sign_in_microsoft_account"></li><li><p>再登录账号之后，会出现页面填写加入计划的详细信息，这里根据自己的实际情况填写即可。（公司部分可以虚拟，此处不会验证公司配置）。</p><img src="/2023/03/25/tools/keep-alive-e5/setting_01.png" class="" title="setting_01"></li><li><p>之后作为开发人员最关注的是什么，根据实际情况随意选择一个</p><img src="/2023/03/25/tools/keep-alive-e5/setting_02.png" class="" title="setting_02"></li><li><p>感兴趣的开发领域也随意选择即可</p><img src="/2023/03/25/tools/keep-alive-e5/setting_03.png" class="" title="setting_03"></li><li><p>之后就会跳转到设置<code>E5</code>订阅</p><img src="/2023/03/25/tools/keep-alive-e5/setting_04.png" class="" title="setting_04"></li><li><p>之后开始填写表单中的信息，<strong>注意这里设置的用户名和创建域会影响到图片中红色圈圈部分的注册的E5账户号名和二级域名</strong>。</p><img src="/2023/03/25/tools/keep-alive-e5/setting_00.png" class="" title="setting_00"></li><li><p>之后，就是设置电话号码。可选择填写国内手机号（<code>China(+86)</code>，<strong>此处就需要谷歌认证了请自行准备好网络环境</strong>）。</p><img src="/2023/03/25/tools/keep-alive-e5/setting_05.png" class="" title="setting_05"></li><li><p>之后就正常登录到开发人员页面了，随后来到<code>admin.microsoft.com</code>来到管理面板。这个时候需要登录刚刚注册的<code>microsoft</code>账号（也就是刚刚配置的<code>E5</code>开发者账号，也就是第八步中红框设定好的域名账号）。</p></li><li><p>登录完成后，选择左边菜单栏中的用户下的活跃用户选项</p><img src="/2023/03/25/tools/keep-alive-e5/setting_06.png" class="" title="setting_06"></li><li><p>勾选自己的账号，然后选择上方的“管理产品许可证”，在弹出的右侧菜单栏中出现的所有许可证都选上然后保存更改</p><img src="/2023/03/25/tools/keep-alive-e5/setting_07.png" class="" title="setting_07"></li></ol><h2 id="下载与激活office"><a href="#下载与激活office" class="headerlink" title="下载与激活office"></a>下载与激活<code>office</code></h2><ol><li><p>来到微软的<a href="https://www.office.com/">官网</a> <a href="https://www.office.com/">https://www.office.com/</a></p><p>登录刚刚注册的E5账号（注意是刚刚注册的E5账号，而不是最开始的微软账号）。</p><img src="/2023/03/25/tools/keep-alive-e5/setting_08.png" class="" title="setting_08"></li><li><p>之后选择右上角的选择，安装<code>office</code>，然后选择 <code>office 365</code> 应用</p><img src="/2023/03/25/tools/keep-alive-e5/setting_09.png" class="" title="setting_09"></li><li><p>之后就下载一个安装软件，下载完成后点击安装运行，会自动安装office 365，再等待安装完成之后，登录之前注册的E5账号即可完成自动激活。</p><img src="/2023/03/25/tools/keep-alive-e5/setting_10.png" class="" title="setting_10"></li></ol><h2 id="使用github-action来自动续订E5"><a href="#使用github-action来自动续订E5" class="headerlink" title="使用github action来自动续订E5"></a>使用<code>github action</code>来自动续订<code>E5</code></h2><ol><li><p>登录<code>github</code>官网，选择账号下面的<code>settings</code>选项。</p><img src="/2023/03/25/tools/keep-alive-e5/active_setting_00.png" class="" title="active_setting_00"></li><li><p>然后点击最下面的<code>Developer settings</code>选项。</p><img src="/2023/03/25/tools/keep-alive-e5/active_setting_01.png" class="" title="active_setting_01"></li><li><p>然后选择 <code>personal accsee tokens</code>，点击 <code>Generate new token</code> 新建 <code>token</code>。保存好新生成的<code>token</code>。</p><img src="/2023/03/25/tools/keep-alive-e5/active_setting_02.png" class="" title="active_setting_02"><img src="/2023/03/25/tools/keep-alive-e5/active_setting_03.png" class="" title="active_setting_03"><img src="/2023/03/25/tools/keep-alive-e5/active_setting_04.png" class="" title="active_setting_04"></li><li><p>搜索<a href="https://github.com/vcheckzen/KeepAliveE5"><code>KeepAliveE5</code></a>项目，并导入到自己的存储库。导入完成后跳转到自己的仓库。</p><img src="/2023/03/25/tools/keep-alive-e5/active_setting_05.png" class="" title="active_setting_05"><p>复制项目的 <code>code</code> ，选择头像旁边的+号导入自己的仓库。</p><img src="/2023/03/25/tools/keep-alive-e5/active_setting_06.png" class="" title="active_setting_06"><img src="/2023/03/25/tools/keep-alive-e5/active_setting_07.png" class="" title="active_setting_07"><img src="/2023/03/25/tools/keep-alive-e5/active_setting_08.png" class="" title="active_setting_08"><p>导入完成后，可以点击跳转到自己项目</p><img src="/2023/03/25/tools/keep-alive-e5/active_setting_09.png" class="" title="active_setting_09"></li><li><p>开启<code>Action</code>功能。进入到项目的<code>settings</code>选项，选择<code>Actions</code>选项中的 <code>General</code>，将Actions permissions 选项设置为第一个 <code>Allow all actions and reusable workflows</code>选项，然后点击<strong>保存</strong>。</p><img src="/2023/03/25/tools/keep-alive-e5/active_setting_10.png" class="" title="active_setting_10"></li><li><p>之后继续在<code>Settings</code>里选择 <code>Secrets and variables</code>选项，点击 <code>Actions</code>，点击 <code>new repository secret</code> 选项。之后配置三个密钥，<code>PAT</code>就是上一步第三步生成的<code>token</code>，<code>USER</code>就是你的<code>E5</code>账号，<code>PASSWD</code>就是你的<code>E5</code>账号的密码，然后<code>Add secret</code>分别设置添加这三个密钥。</p><img src="/2023/03/25/tools/keep-alive-e5/active_setting_11.png" class="" title="active_setting_11"><img src="/2023/03/25/tools/keep-alive-e5/active_setting_13.png" class="" title="active_setting_13"><p>上述三个配置在项目的<code>README</code>中也可以看到</p><img src="/2023/03/25/tools/keep-alive-e5/active_setting_12.png" class="" title="active_setting_12"></li><li><p>之后根据<a href="https://learn.microsoft.com/zh-cn/azure/active-directory/fundamentals/concept-fundamentals-security-defaults#disabling-security-defaults">微软禁用安全默认值教程</a>禁用安全默认值</p><ol><li><p>以安全管理员、条件访问管理员或全局管理员身份登录到 <a href="https://azure.microsoft.com/zh-cn/">Azure</a></p><img src="/2023/03/25/tools/keep-alive-e5/active_setting_14.png" class="" title="active_setting_14"></li><li><p>点击 <code>Azure active directoty</code> 选择 <strong>属性</strong></p></li><li><p>选择 <strong>管理安全默认值</strong></p></li><li><p>将 <strong>启用安全默认值</strong> 切换为 <strong>否</strong></p></li><li><p>选择 保存</p><img src="/2023/03/25/tools/keep-alive-e5/active_setting_15.png" class="" title="active_setting_15"></li></ol></li><li><p>启用<code>Action</code>的注册<code>APP</code>工作流，进入到<code>Action</code>点击 <code>Register APP</code>，点击右侧的<code>Run workflow</code>，分支就选择当前项目的主分支，然后点击 <code>Run workflow</code> 运行注册流程。</p><img src="/2023/03/25/tools/keep-alive-e5/active_setting_16.png" class="" title="active_setting_16"></li><li><p>然后等待一会，等待期间可以点击进去看运行的日志，运行到什么步骤了，完成后点击日志中的 <code>Register app</code> 那一步。 如果最后显示是注册成功就可以了。</p><img src="/2023/03/25/tools/keep-alive-e5/active_setting_17.png" class="" title="active_setting_17"><img src="/2023/03/25/tools/keep-alive-e5/active_setting_18.png" class="" title="active_setting_18"><img src="/2023/03/25/tools/keep-alive-e5/active_setting_20.png" class="" title="active_setting_20"></li><li><p>启用 <code>Action</code> 的调用 <code>API</code> 工作流。进入到 <code>Action</code> 点击 <code>invoke API</code>，点击右侧 <code>Run workflow</code>， 分支就选择当前项目的主分支，点击 <code>Run workflow</code> 运行调用流程。</p><img src="/2023/03/25/tools/keep-alive-e5/active_setting_19.png" class="" title="active_setting_19"></li><li><p>然后等待一会，等待期间可以点击进去看运行的日志，运行到什么步骤了，完成后点击日志中的 <code>Test Api</code> 那一步。可以看到最后已经成功了。</p><img src="/2023/03/25/tools/keep-alive-e5/active_setting_21.png" class="" title="active_setting_21"><img src="/2023/03/25/tools/keep-alive-e5/active_setting_22.png" class="" title="active_setting_22"></li><li><p>后面之歌工作流就会每天自动调用<code>API</code>，保证账号是使用的，从而得到微软的自动续期。</p></li></ol><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开心最重要</title>
      <link href="/2022/05/22/dui-zi-ji-shuo/happy-day/"/>
      <url>/2022/05/22/dui-zi-ji-shuo/happy-day/</url>
      
        <content type="html"><![CDATA[<h1 id="开心最重要"><a href="#开心最重要" class="headerlink" title="开心最重要"></a>开心最重要</h1><blockquote><p>今日感想</p></blockquote><p>不用记住今天发生了什么，只记住以后要自己开心最重要啊！！！</p><p>喜欢就去做呀，开开心心的，把自己搞的那么疲惫干啥，普普通通就行。</p>]]></content>
      
      
      <categories>
          
          <category> 对自己说 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心情 </tag>
            
            <tag> 开心就好 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法与示例</title>
      <link href="/2022/05/15/note/markdown-notes/"/>
      <url>/2022/05/15/note/markdown-notes/</url>
      
        <content type="html"><![CDATA[<h1 id="markdown语法与示例"><a href="#markdown语法与示例" class="headerlink" title="markdown语法与示例"></a>markdown语法与示例</h1><blockquote><p>注：所有例子，上面是效果，下面是源码。</p><p>部分效果展示由于hexo渲染网页的原因无法完全展示。</p></blockquote><h2 id="简单概述"><a href="#简单概述" class="headerlink" title="简单概述"></a>简单概述</h2><h4 id="宗旨"><a href="#宗旨" class="headerlink" title="宗旨"></a>宗旨</h4><p>Markdown 的目标是实现「易读易写」。</p><p>可读性，无论如何，都是最重要的。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。Markdown 语法受到一些既有 text-to-HTML 格式的影响，包括 <a href="http://docutils.sourceforge.net/mirror/setext.html">Setext</a>、<a href="http://www.aaronsw.com/2002/atx/">atx</a>、<a href="http://textism.com/tools/textile/">Textile</a>、<a href="http://docutils.sourceforge.net/rst.html">reStructuredText</a>、<a href="http://www.triptico.com/software/grutatxt.html">Grutatext</a> 和 <a href="http://ettext.taint.org/doc/">EtText</a>，而最大灵感来源其实是纯文本电子邮件的格式。</p><hr><h4 id="兼容HTML"><a href="#兼容HTML" class="headerlink" title="兼容HTML"></a>兼容HTML</h4><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。不需要额外标注这是 HTML 或是 Markdown；只要直接加标签就可以了。但是需要注意，在 HTML 区块标签间的 Markdown 格式语法将不会被处理。</p><p>eg. 这里的双星不在做强调处理。</p><p>这是一个普通段落。</p><table>    <tbody><tr>        <td>*Foo*</td>    </tr></tbody></table><p>这是另一个普通段落。</p><hr><h4 id="特殊字符自动转换"><a href="#特殊字符自动转换" class="headerlink" title="特殊字符自动转换"></a>特殊字符自动转换</h4><p>特殊字符的转义字符，可以自动直接的转换进行展现</p><p>eg.</p><p>&amp;copy;</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token entity named-entity" title="©">&amp;copy;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>A&amp;T</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">AT<span class="token entity named-entity" title="&amp;">&amp;amp;</span>T<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>&lt;</p><pre class="line-numbers language-none"><code class="language-none">&lt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>&gt;</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token entity named-entity" title=">">&amp;gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>"</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token entity named-entity" title="&quot;">&amp;quot;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>&amp;nbsp;</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><p>支持两种标题的语法，类 <a href="http://docutils.sourceforge.net/mirror/setext.html">Setext</a> 和类 <a href="http://www.aaronsw.com/2002/atx/">atx</a> 形式</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">类 Setext 形式是用底线的形式，利用 = （最高阶标题）和 - （第二阶标题）<span class="token title important">This is an H1<span class="token punctuation">=============</span></span><span class="token title important">This is an H2<span class="token punctuation">-------------</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">类 Atx 形式则是在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶<span class="token title important"><span class="token punctuation">#</span> 这是 H1</span><span class="token title important"><span class="token punctuation">##</span> 这是 H2</span><span class="token title important"><span class="token punctuation">###</span> 这是 H3</span><span class="token title important"><span class="token punctuation">####</span> 这是 H4</span><span class="token title important"><span class="token punctuation">#####</span> 这是 H5</span><span class="token title important"><span class="token punctuation">######</span> 这是 H6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="区块引用-Blockquotes"><a href="#区块引用-Blockquotes" class="headerlink" title="区块引用 Blockquotes"></a>区块引用 Blockquotes</h4><blockquote><p>这是一个区块引用</p></blockquote><blockquote><blockquote><p>也可以使用多个 </p></blockquote></blockquote><blockquote><h6 id="这是一个标题。"><a href="#这是一个标题。" class="headerlink" title="这是一个标题。"></a>这是一个标题。</h6></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token blockquote punctuation">&gt;</span> 这是一个区块引用<span class="token blockquote punctuation">&gt; &gt;</span> 也可以使用多个 <span class="token blockquote punctuation">&gt;</span> <span class="token title important"><span class="token punctuation">######</span> 这是一个标题。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><h5 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h5><ul><li><p>1</p></li><li><p>2</p><ul><li><p>a</p><ul><li>bb</li></ul><ul><li>aa</li></ul></li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none">在无序列表中 使用 { + ， - ， * }三个符号来标识无序列表，三者功能相同，相同层级下的列表表示建议使用相同的标识符，配合四个空白字符缩进，三者的组合则可以搭配出层级效果+ 1+ 2* a* bb- aa&gt; bb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h5 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h5><ol><li>第一</li><li>第二<ul><li>a<br>3. 反斜杠避免被识别为有序列表</li></ul></li><li>第三</li></ol><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">使用数字接着一个英文句点，则是有序列表。可以配合使用缩进配合与无序列表，区块引用等配合使用<span class="token list punctuation">1.</span> 第一<span class="token list punctuation">2.</span> 第二<span class="token list punctuation">+</span> a3\. 反斜杠避免被识别为有序列表<span class="token list punctuation">3.</span> 第三<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h4><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">这是一个代码区块<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这是<code>一个</code>小段 <code>的</code> 代码 <code>显示</code></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">代码区块可以进行缩进区分，或者使用六个个反引号来进行包围，前三个反引号之后可以跟着指定的代码格式。（这里使用\,是为了展示源码）\```markdown\这是一个代码区块\```小段代码这是``` 一个 ```小段 <span class="token code-snippet code keyword">``的``</span> 代码 <span class="token code-snippet code keyword">`显示`</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h4><hr><hr><hr><hr><hr><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。也可以在星号或是减号中间插入空格<span class="token hr punctuation">* * *</span><span class="token hr punctuation">***</span><span class="token hr punctuation">*****</span><span class="token hr punctuation">- - -</span><span class="token hr punctuation">---------------------------------------</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><p>两种形式的链接语法： 行内式和参考式两种形式</p><hr><h6 id="行内式"><a href="#行内式" class="headerlink" title="行内式"></a>行内式</h6><p><a href="http://www.baidu.com/" title="百度">示例1</a> 链接中的title文字可以使用双引号包裹起来显示。<br><a href="http://www.baidu.com/">示例2</a> 这是一个链接。</p><p><a href="/about/">示例3</a> 相对路径链接.</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">下面为行内式<span class="token url">[<span class="token content">示例1</span>](<span class="token url">http://www.baidu.com/</span> <span class="token string">"百度"</span>)</span> 链接中的title文字可以使用双引号包裹起来显示。<span class="token url">[<span class="token content">示例2</span>](<span class="token url">http://www.baidu.com/</span>)</span> 这是一个链接。要链接到同样主机的资源，可以使用相对路径<span class="token url">[<span class="token content">示例3</span>](<span class="token url">/about/</span>)</span> 相对路径链接.参考式的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h6 id="参考式"><a href="#参考式" class="headerlink" title="参考式"></a>参考式</h6><p><a href="http://www.baidu.com/" title="百度">参考式</a> 此处引用的链接是参考，id标签中定义的.</p><p><a href="http://www.baidu.com/" title="百度">id</a> 此处第二个标签中不指明使用的参考，默认会寻找与名称相同的标记链接</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">参考式的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记<span class="token url">[<span class="token content">参考式</span>][<span class="token variable">id</span>]</span> 此处引用的链接是参考，id标签中定义的.[id][] 此处第二个标签中不指明使用的参考，默认会寻找与名称相同的标记链接接着，在文件的任意处，你可以把这个标记的链接内容定义出来此处的注释 使用 "" , '' , () 三种标识效果相同，且注意需要 [] 后紧跟 ：<span class="token url-reference url"><span class="token punctuation">[</span><span class="token variable">id</span><span class="token punctuation">]</span><span class="token punctuation">:</span> http://www.baidu.com/  <span class="token string">"百度"</span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="交叉引用"><a href="#交叉引用" class="headerlink" title="交叉引用"></a>交叉引用</h6><p>即引用本文章中的其他标题或者另一个文件中的其他标题</p><p><a href="#%E5%AE%97%E6%97%A8">引用到宗旨部分</a></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">引用同一个文件的某个标题<span class="token url">[<span class="token content">title</span>](<span class="token url">#title</span>)</span>使用 # 选中章节。 注意要将大写字母改成小写，并删除特殊字符，空格使用 - 代替, 几级标题就时几个#引用另一个文件<span class="token url">[<span class="token content">title</span>](<span class="token url">./dir/file.md</span>)</span>引用另一个我呢见的某一个标题<span class="token url">[<span class="token content">title</span>](<span class="token url">./dir/file.md#title</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h4><p><em>斜体-星号</em></p><p><em>斜体-下划线</em></p><p><strong>加粗-星号</strong></p><p><strong>加粗-下划线</strong></p><p><del>删除线</del></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token italic"><span class="token punctuation">*</span><span class="token content">斜体-星号</span><span class="token punctuation">*</span></span><span class="token italic"><span class="token punctuation">_</span><span class="token content">斜体-下划线</span><span class="token punctuation">_</span></span><span class="token bold"><span class="token punctuation">**</span><span class="token content">加粗-星号</span><span class="token punctuation">**</span></span><span class="token bold"><span class="token punctuation">__</span><span class="token content">加粗-下划线</span><span class="token punctuation">__</span></span><span class="token strike"><span class="token punctuation">~~</span><span class="token content">删除线</span><span class="token punctuation">~~</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><p>同样也允许两种样式： <em>行内式</em>和<em>参考式</em></p><hr><h6 id="行内式-1"><a href="#行内式-1" class="headerlink" title="行内式"></a>行内式</h6><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">与超链接相似，只是在·[]·前添加 !<span class="token url"><span class="token operator">!</span>[<span class="token content">图片</span>](<span class="token url">/path/to/img.jpg</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h6 id="参考式-1"><a href="#参考式-1" class="headerlink" title="参考式"></a>参考式</h6><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">同样与超链接的参考式相同 只是在<span class="token code-snippet code keyword">`[]`</span>前添加 <span class="token code-snippet code keyword">`!`</span>!图片][id]<span class="token url-reference url"><span class="token punctuation">[</span><span class="token variable">id</span><span class="token punctuation">]</span><span class="token punctuation">:</span> url/to/image  <span class="token string">"图片注释"</span></span>注意这里的参考链接 <span class="token code-snippet code keyword">`[]`</span> 前不需要添加 <span class="token code-snippet code keyword">`!`</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h4><p>Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用方括号包起来， Markdown 就会自动把它转成链接</p><hr><p><a href="http://www.baidu.com/">http://www.baidu.com/</a></p><p><a href="mailto:address@example.com">address@example.com</a></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&lt;http://www.baidu.com/&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>address@example.com</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="反斜杠"><a href="#反斜杠" class="headerlink" title="反斜杠"></a>反斜杠</h4><p>Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，即转义字符，使得其后的字符不被markdown识别处理，方便与插入普通字符。</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">\   反斜线`   反引号<span class="token list punctuation">*</span>   星号_   底线{}  花括号[]  方括号()  括弧<span class="token title important"><span class="token punctuation">#</span>   井字号</span><span class="token list punctuation">+</span>   加号<span class="token list punctuation">-</span>   减号.   英文句点!   惊叹号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>基于markdown可以适配html语言，所以我们也可以使用html语言中简单的标签来达到更多的扩展效果</p><hr><h4 id="颜色设置"><a href="#颜色设置" class="headerlink" title="颜色设置"></a>颜色设置</h4><p><font size="3" color="red">红色</font></p><p><font size="2" color="blue">蓝色</font></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>红色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>blue<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>红色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="注脚"><a href="#注脚" class="headerlink" title="注脚"></a>注脚</h4><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">与行内式的超链接相似,只是在<span class="token code-snippet code keyword">`[]`</span>中添加 <span class="token code-snippet code keyword">`^`</span><span class="token url-reference url"><span class="token punctuation">[</span><span class="token variable">^注脚</span><span class="token punctuation">]</span><span class="token punctuation">:</span> https://www.appinn.com/markdown/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="链接文件"><a href="#链接文件" class="headerlink" title="链接文件"></a>链接文件</h4><p><a href="E:/Study/studyNote/Study/other-notes/git-nodes.md">绝对地址文件</a><br><a href="git-nodes.md">相对地址文件</a></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">链接文件与超链接语法类似，<span class="token url">[<span class="token content">绝对地址文件</span>](<span class="token url">E:/Study/studyNote/Study/other-notes/git-nodes.md</span>)</span><span class="token url">[<span class="token content">相对地址文件</span>](<span class="token url">git-nodes.md</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h4><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">graph</span> LR方<span class="token text string">[方形]</span> <span class="token arrow operator">--&gt;</span>圆<span class="token text string">(圆角)</span>    圆 <span class="token arrow operator">--&gt;</span> A<span class="token text string">{条件a}</span>    A <span class="token arrow operator">--&gt;</span><span class="token label property">|a=1|</span> B<span class="token text string">[结果B]</span>    A <span class="token arrow operator">--&gt;</span><span class="token label property">|a=2|</span> C<span class="token text string">[结果C]</span>    F<span class="token text string">[横向流程图]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">graph</span> TD方<span class="token text string">[方形]</span> <span class="token arrow operator">--&gt;</span>圆<span class="token text string">(圆角)</span>    圆 <span class="token arrow operator">--&gt;</span> A<span class="token text string">{条件a}</span>    A <span class="token arrow operator">--&gt;</span><span class="token label property">|a=1|</span> B<span class="token text string">[结果B]</span>    A <span class="token arrow operator">--&gt;</span><span class="token label property">|a=2|</span> C<span class="token text string">[结果C]</span>    F<span class="token text string">[横向流程图]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">本质上是代码块，不过使用的语言是『mermaid』，详细操作可以查询『mermaid』\ ```mermaidgraph LR方[方形] --&gt;圆(圆角)    圆 --&gt; A{条件a}    A --&gt;|a=1| B[结果B]    A --&gt;|a=2| C[结果C]    F[横向流程图]\ ```\ ```mermaidgraph TD方[方形] --&gt;圆(圆角)    圆 --&gt; A{条件a}    A --&gt;|a=1| B[结果B]    A --&gt;|a=2| C[结果C]    F[横向流程图]\ ```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="代办"><a href="#代办" class="headerlink" title="代办"></a>代办</h4><ul><li><input disabled="" type="checkbox"> 这是一个代办</li><li><input checked="" disabled="" type="checkbox"> 这是一个已办</li></ul><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">-</span> [ ] 这是一个代办<span class="token list punctuation">-</span> [x] 这是一个已办ps：并不是所有情况下，代办的效果都可以实现<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">[TOC]  # 即插入一个文章目录<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><blockquote><p><a href="https://www.appinn.com/markdown/">https://www.appinn.com/markdown/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-FAQ</title>
      <link href="/2022/05/08/faq/faq-docker/"/>
      <url>/2022/05/08/faq/faq-docker/</url>
      
        <content type="html"><![CDATA[<h1 id="FAQ-docker"><a href="#FAQ-docker" class="headerlink" title="FAQ-docker"></a>FAQ-docker</h1><blockquote><p>自己在使用docker做开发的过程中遇到的一些问题的记录</p></blockquote><h5 id="Q-Dockerfile中COPY-指令的-lt-src-gt-是否支持"><a href="#Q-Dockerfile中COPY-指令的-lt-src-gt-是否支持" class="headerlink" title="Q:Dockerfile中COPY 指令的<src> 是否支持../"></a>Q:<code>Dockerfile</code>中<code>COPY</code> 指令的<code>&lt;src&gt;</code> 是否支持<code>../</code></h5><p><strong>A:</strong></p><blockquote><p><code>COPY</code>的源文件目录不支持使用 <code>../</code>来访问其上册目录，<src>路径必须构建在上下文中，因为docker构建的第一步就是将上下文目录和子目录发送到docker守护进程</src></p></blockquote><h5 id="Q-docker-run-detach-keys-quot-quot-中参数-detach-keys的作用"><a href="#Q-docker-run-detach-keys-quot-quot-中参数-detach-keys的作用" class="headerlink" title="Q: docker run --detach-keys=&quot;&quot;中参数--detach-keys的作用"></a>Q: <code>docker run --detach-keys=""</code>中参数<code>--detach-keys</code>的作用</h5><p> <strong>A：</strong></p><blockquote><p>官网解释为：Override the key sequence for detaching a container</p><p>用于容器的键盘映射键位，在容器被连接到前台时，若宿主机的键盘键位与容器键位冲突，可以使用该指令对容器的键位进行重新映射。</p></blockquote><h5 id="Q：Dockerfile中的COPY指令，拷贝文件夹时只会拷贝文件夹中的内容"><a href="#Q：Dockerfile中的COPY指令，拷贝文件夹时只会拷贝文件夹中的内容" class="headerlink" title="Q：Dockerfile中的COPY指令，拷贝文件夹时只会拷贝文件夹中的内容"></a>Q：<code>Dockerfile中</code>的<code>COPY</code>指令，拷贝文件夹时只会拷贝文件夹中的内容</h5><p><strong>A:</strong></p><blockquote><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">COPY data/ /home/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>data中的目录结构为：</p><p>｜—— data</p><p>｜｜——dir1</p><p>｜｜｜a.txt</p><p>｜｜——dir2</p><p>｜｜｜b.txt</p><p>｜｜c.txt</p><p>拷贝到容器中后目录结构为，也就是并不会拷贝目录本身，只会拷贝目录中的内容文件</p><p>｜—— home</p><p>｜｜——dir1</p><p>｜｜｜a.txt</p><p>｜｜——dir2</p><p>｜｜｜b.txt</p><p>｜｜c.txt</p></blockquote><h5 id="Q：Dockerfile-build过程中出现错误，如何去调试"><a href="#Q：Dockerfile-build过程中出现错误，如何去调试" class="headerlink" title="Q：Dockerfile build过程中出现错误，如何去调试"></a>Q：<code>Dockerfile</code> <code>build</code>过程中出现错误，如何去调试</h5><p><strong>A：</strong></p><blockquote><p>执行 <code>docker build</code> 命令使用<code>Dockerfile</code>构建一个新的镜像的时候，dokcer内部的执行的构建步骤大致为如下几步：</p><ol><li>使用<code>Dockerfile</code> 中定义的基础镜像<code>FROM centos</code>运行一个容器</li><li>依次执行<code>Dockerfile</code> 中后续的指令，来对启动的容器进行修改；<ol><li>每执行完一条指令后，执行一个类似于<code>commit</code>的操作，来生成一个新的镜像层。(<code>build</code> <code>Dockerfile</code>的时候若不关闭使用缓存构建，用的镜像层的缓存就是以此方式构建的)</li><li>基于上一步提交的镜像来运行一个新的容器</li><li>重复1，2步骤来完成对<code>Dockerfile</code>中所有指令的执行</li></ol></li><li>完成镜像的构建</li></ol><p>所以基于上述的构建步骤，可以通过重新启动出错前一步的build出来的容器还原现场，之后再执行出错一行的命令来分析错误的原因。</p><p>eg.</p><p>执行 <code>docker build . -t test:1.0.0</code> 时某一行出现错误：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">Sending build context to Docker daemon  67.37MBStep 1/5 : FROM java:8 ---&gt; d23bdf5b1b1bStep 2/5 : COPY ./target/*.jar /app/app.jarCOPY failed: no source files were specified<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到在执行<em><strong>Step 2/5</strong></em>出现错误，在其上一步<em><strong>Step 1/5</strong></em>会保留一个临时容器<code>d23bdf5b1b1b</code> ，所以就可以启动这个临时容器来达到还原出错前的现场</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@qing centos]$ docker container run -it d23bdf5b1b1b /bin/bash# 之后在容器中执行错误命令来排查错误# 注意 这里是使用交互模式启动，使用exit退出后 容器就会关闭<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2>]]></content>
      
      
      <categories>
          
          <category> FAQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> FAQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MacOS安装docker和kubernetes</title>
      <link href="/2022/05/04/devops/docker-k8s-mac-install/"/>
      <url>/2022/05/04/devops/docker-k8s-mac-install/</url>
      
        <content type="html"><![CDATA[<h1 id="MacOS安装docker和kubernetes"><a href="#MacOS安装docker和kubernetes" class="headerlink" title="MacOS安装docker和kubernetes"></a>MacOS安装docker和kubernetes</h1><blockquote><p>在mac电脑上安装 Docker Desktop 以及对应的kubernetes(k8s)</p><p>相关资源下载地址：</p><p><a href="https://docs.docker.com/desktop/mac/install/">Docker Desktop</a></p><p><a href="https://github.com/AliyunContainerService/k8s-for-docker-desktop">k8s-for-docker-desktop</a></p></blockquote><h2 id="Docker-Desktop-安装"><a href="#Docker-Desktop-安装" class="headerlink" title="Docker Desktop 安装"></a>Docker Desktop 安装</h2><ol><li>在docker官网上下载对应芯片版本的<a href="https://docs.docker.com/desktop/mac/install/">Docker Desktop</a> dmg文件</li></ol><img src="/2022/05/04/devops/docker-k8s-mac-install/0001.png" class="" title="下载"><hr><ol start="2"><li>打开下载的dmg文件 安装docker</li></ol><img src="/2022/05/04/devops/docker-k8s-mac-install/0002.png" class="" title="安装"><ol start="3"><li>在启动台找到docker的图标即可启动</li></ol><img src="/2022/05/04/devops/docker-k8s-mac-install/0003.png" class="" title="启动"><h2 id="Kubernetes-安装"><a href="#Kubernetes-安装" class="headerlink" title="Kubernetes 安装"></a>Kubernetes 安装</h2><blockquote><p>这里没有使用docker destop自带的k8s安装按钮安装应用，而是使用阿里云的k8s-for-docker-desktop来进行安装。</p></blockquote><ol><li>在docker desktop中查看关联的k8s版本</li></ol><img src="/2022/05/04/devops/docker-k8s-mac-install/0004.png" class="" title="关联的k8s版本"><ol start="2"><li>访问<a href="https://github.com/AliyunContainerService/k8s-for-docker-desktop">k8s-for-docker-desktop</a>的github项目地址找到对应的版本下载项目</li></ol><img src="/2022/05/04/devops/docker-k8s-mac-install/0005.png" class="" title="下载"><ol start="3"><li><p>解压文件，执行其中的脚本 load_images.sh</p><blockquote><p>如果安装时下载资源比较慢，可以为docker daemon配置国内的镜像加速，阿里云镜像服务或者中科大镜像加速地址：<a href="https://docker.mirrors.ustc.edu.cn/">https://docker.mirrors.ustc.edu.cn</a></p></blockquote><img src="/2022/05/04/devops/docker-k8s-mac-install/0007.png" class="" title="配置镜像加速"></li></ol><img src="/2022/05/04/devops/docker-k8s-mac-install/0006.png" class="" title="执行load_images.sh"><ol start="4"><li>等待执行成功，可以执行命令 kubectl version 查看版本来确定是否安装成功</li></ol><img src="/2022/05/04/devops/docker-k8s-mac-install/0008.png" class="" title="查看安装版本"><ol start="5"><li>打开docker desktop控制面板查看相关信息</li></ol><img src="/2022/05/04/devops/docker-k8s-mac-install/0009.png" class="" title="查看相关信息"><ol start="6"><li><p>配置kubernetes</p><blockquote><p>可选操作：切换kubernetes运行上下文到docker-desktop（之前版本的context为docker-for-desktop）</p></blockquote></li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 切换运行上下文[root@qing centos]$ kubectl config use-context docker-desktop# 查看配置[root@qing centos]$ kubectl config view# 验证kubernetes集群状态[root@qing centos]$ kubectl cluster-info[root@qing centos]$ kubectl get nodes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><strong>完</strong></p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> kubernetes </tag>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kubernetes</title>
      <link href="/2022/04/30/devops/kubernetes/"/>
      <url>/2022/04/30/devops/kubernetes/</url>
      
        <content type="html"><![CDATA[<h1 id="kubernetes"><a href="#kubernetes" class="headerlink" title="kubernetes"></a>kubernetes</h1><blockquote><p>大规模容器编排系统</p></blockquote><p><strong>特性</strong></p><ul><li><strong>服务发现和负载均衡</strong><ul><li>Kubernetes可以使用DNS名称或者IP地址公开容器，如果进入容器的流量很大，Kubernetes可以负载均和冰粉配网络流量，从而使部署稳定</li></ul></li><li><strong>存储编排</strong><ul><li>Kubernetes允许自动挂在所选择的存储系统。eg. 本地存储、公共云提供商</li></ul></li><li><strong>自动部署和回滚</strong><ul><li>使用Kubernetes描述已部署的所需状态，可以将受控的速率将实际状态更改为期望状态。比如可以自动化Kubernetes来部署创建新容器，删除现有容器并将它们的所有资源用于新容器</li></ul></li><li><strong>自动完成装箱计算</strong><ul><li>Kubernetes允许指定每个容器所需的CPU和RAM。当容器指定来资源请求时，Kubernetes可以做出更好的决策来管理容器资源。</li></ul></li><li><strong>自我修复</strong><ul><li>Kubernetes重新启动失败的容器、替换容器、杀死不相应用户定义的运行状态检查的容器，并且在准备好服务之前不将其通告给客户端。</li></ul></li><li><strong>密钥和配置管理</strong><ul><li>Kubernetes可以存储和管理敏感信息，例如密码、OAuth令牌和ssh密钥。可以在不重建容器镜像的情况下部署和更新密钥和应用程序配置，也无需在堆栈配置中暴露密钥。</li></ul></li></ul><p>Kubernetes提供了一个可弹性运行分布式系统的框架，可以更轻松管理系统的Canary部署。</p><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><h3 id="工作方式"><a href="#工作方式" class="headerlink" title="工作方式"></a>工作方式</h3><p>Kubernetes Cluster = N Master Node + N Worker Node =&gt; N主节点 + N工作节点；</p><h3 id="平面组件结构"><a href="#平面组件结构" class="headerlink" title="平面组件结构"></a>平面组件结构</h3><img src="/2022/04/30/devops/kubernetes/components-of-kubernetes.svg" class="" title="components-of-kubernetes"><img src="/2022/04/30/devops/kubernetes/0001.png" class="" title="平面结构图-1"><p><strong>控制平面组件</strong>(control plane)</p><ul><li><p><strong>kube-apiserver</strong></p><p>API服务器为K8s集群资源操作提供唯一入口，并提供认证、授权、访问控制、API 注册和发现机制。</p><p>Kubernetes API 服务器验证并配置 API 对象的数据， 这些对象包括 pods、services、replicationcontrollers 等。 API 服务器为 REST 操作提供服务，并为集群的共享状态提供前端， 所有其他组件都通过该前端进行交互。</p></li><li><p><strong>etcd</strong></p><p>兼具一致性和高可用性的键值数据库，可以作为保存 Kubernetes 所有集群数据的后台数据库(例如 Pod 的数量、状态、命名空间等）、API 对象和服务发现细节。 在生产级k8s中etcd通常会以集群的方式存在，安全原因，它只能从 API 服务器访问。</p></li><li><p><strong>kube-scheduler</strong></p><p>kube-scheduler 负责监视新创建、未指定运行Node的 Pods，决策出一个让pod运行的节点。</p><p>调度决策考虑的因素包括单个 Pod 和 Pod 集合的资源需求、硬件/软件/策略约束、亲和性和反亲和性规范、数据位置、工作负载间的干扰和最后时限。</p></li><li><p><strong>kube-controller-manager</strong></p><p>k8s在后台运行许多不同的控制器进程，当服务配置发生更改时（例如，替换运行 pod 的镜像，或更改配置 yaml 文件中的参数），控制器会发现更改并开始朝着新的期望状态工作。</p><p>控制器包括:</p><ul><li>节点控制器（Node Controller）: 负责在节点出现故障时进行通知和响应</li><li>任务控制器（Job controller）: 监测代表一次性任务的 Job 对象，然后创建 Pods 来运行这些任务直至完成</li><li>端点控制器（Endpoints Controller）: 填充端点(Endpoints)对象(即加入 Service 与 Pod)</li><li>服务帐户和令牌控制器（Service Account &amp; Token Controllers）: 为新的命名空间创建默认帐户和 API 访问令牌</li></ul></li><li><p><strong>cloud-controller-manager</strong></p><p>云控制器管理器使得你可以将你的集群连接到云提供商的 API 之上， 同时可以将云平台交互组件与本地集群中组件分离。</p><p>下面的控制器都包含对云平台驱动的依赖：</p><ul><li>节点控制器（Node Controller）: 用于在节点终止响应后检查云提供商以确定节点是否已被删除</li><li>路由控制器（Route Controller）: 用于在底层云基础架构中设置路由</li><li>服务控制器（Service Controller）: 用于创建、更新和删除云提供商负载均衡器</li></ul></li></ul><p><strong>Node中组件</strong></p><blockquote><p>节点组件在每个节点上运行，维护运行的 Pod 并提供 Kubernetes 运行环境。</p></blockquote><ul><li><p><strong>kubelet</strong></p><p>一个在集群中每个node上运行的代理。 它保证容器都 运行在 Pod 中。kubelet 定期接收新的或修改过的 pod 规范 PodSpecs（主要通过 kube-apiserver）并确保 pod 及容器健康并以所需状态运行。该组件还向 kube-apiserver 报告运行它的主机的健康状况。</p><p><strong>kubelet 不会管理不是由 Kubernetes 创建的容器。</strong></p></li><li><p><strong>kube-proxy</strong></p><p>kube-proxy是集群中每个节点上运行的网络代理， 实现 Kubernetes 服务（Service） 概念的一部分。用于处理单个主机子网划分并向外部世界公开服务。它跨集群中的各种隔离网络将请求转发到正确的 pod/容器。</p><p>kube-proxy 维护节点上的网络规则。这些网络规则允许从集群内部或外部的网络会话与 Pod 进行网络通信。</p><p>如果操作系统提供了数据包过滤层并可用的话，kube-proxy 会通过它来实现网络规则。否则， kube-proxy 仅转发流量本身。</p></li></ul><blockquote><p>该部分组件说明参考自： <a href="https://zhuanlan.zhihu.com/p/409971135">https://zhuanlan.zhihu.com/p/409971135</a></p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>docker kubelet kebectl kubeadm</p></blockquote><ol><li><strong>docker</strong> : 容器运行环境</li><li><strong>kubelet</strong> : 基本运行环境</li><li>kubectl : 帮助管理员输入相关操作命令， 可以只安装在admin</li><li>kubeadm : 帮助管理人员快速搭建集群环境</li></ol><h3 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h3><ol><li><strong>配置yum源</strong></li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ yum <span class="token function">install</span> -y yum-utils<span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ yum-config-manager <span class="token punctuation">\</span>--add-repo <span class="token punctuation">\</span>https://download.docker.com/linux/centos/docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>安装docker</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ <span class="token function">sudo</span> yum <span class="token function">install</span> -y docker-ce docker-ce-cli containerd.io<span class="token comment"># 安装指定版本</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ <span class="token function">sudo</span> yum <span class="token function">install</span> -y docker-ce-20.10.7 docker-ce-cli-20.10.7 containerd.io-1.4.6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li><strong>启动docker</strong></li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ systemctl <span class="token builtin class-name">enable</span> docker --now<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>配置镜像加速</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ <span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="集群创建"><a href="#集群创建" class="headerlink" title="集群创建"></a>集群创建</h3><blockquote><p>请先保证docker安装完成</p></blockquote><p><strong>安装kebuadm</strong></p><ul><li>一台兼容的Linux主机。Kubernetes项目为基于Debian和Red Hat的Linux发行版以及一些不提供包管理器的发行版提供通用的指令</li><li>每台机器2GB或者更多的内存（较少会影响应用的运行内存）</li><li>2 CPU核或更多</li><li>集群中的所有机器的网络彼此均能相互连接（公网和内网都可以）<ul><li><strong>设置防火墙放行规则</strong></li></ul></li><li>节点之中不可以用重复的主机名、MAC地址和product_uuid<ul><li><strong>设置不同的hostname</strong></li></ul></li><li>开启机器上的某些端口<ul><li><strong>内网通信</strong></li></ul></li><li>禁用交换分区。为了保证kubelet正常工作，<strong>必须禁用交换分区</strong><ul><li><strong>永久关闭</strong></li></ul></li></ul><blockquote><p>设置主机名：hostnamectl set-hostname k8s-master</p><p>查看主机名：hostname</p><p>查看分区：free -m </p></blockquote><img src="/2022/04/30/devops/kubernetes/0003.png" class="" title="集群结构"><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 设置独立域名</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ hostnamectl set-hostname xxxx<span class="token comment"># 将SELinux设置为 permissive模式（相当于禁用）</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ setenforce <span class="token number">0</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ <span class="token function">sed</span> -i <span class="token string">'s/^SELINUX=enforcing$/SELINUX=permissive/'</span> /etc/selinux/config<span class="token comment"># 关闭swap</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ swapoff -a<span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ <span class="token function">sed</span> -ri <span class="token string">'s/.*swap.*/#&amp;/'</span> /etc/fstab<span class="token comment"># 允许 iptables 检查桥接流量</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ <span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/modules-load.d/k8s.conf</span>br_netfilterEOF</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ <span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/sysctl.d/k8s.conf</span>net.bridge.bridge-nf-call-ip6tables = 1net.bridge.bridge-nf-call-iptables = 1EOF</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ sysctl --system<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="安装kubelet、kubeadm、kubectl"><a href="#安装kubelet、kubeadm、kubectl" class="headerlink" title="安装kubelet、kubeadm、kubectl"></a>安装kubelet、kubeadm、kubectl</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ <span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/yum.repos.d/kubernetes.repo</span>[kubernetes]name=Kubernetesbaseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64enabled=1gpgcheck=0repo_gpgcheck=0gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg   http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpgexclude=kubelet kubeadm kubectlEOF</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ yum <span class="token function">install</span> -y kubelet-1.20.9 kubeadm-1.20.9 kubectl-1.20.9 --disableexcludes<span class="token operator">=</span>kubernetes<span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ systemctl <span class="token builtin class-name">enable</span> --now kubelet<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>kubelet 现在每隔几秒就会重启，因为它陷入了一个等待kubeadm指令的死循环在等待指令</p><p>可以使用命令  systemctl status kubelet 查看状态</p></blockquote><h4 id="使用kubeadm引导集群"><a href="#使用kubeadm引导集群" class="headerlink" title="使用kubeadm引导集群"></a>使用kubeadm引导集群</h4><h5 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h5><blockquote><p>下载各个机器需要的镜像</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ <span class="token function">tee</span> ./images.sh <span class="token operator">&lt;&lt;-</span><span class="token string">'EOF'#!/bin/bashimages=(kube-apiserver:v1.20.9kube-proxy:v1.20.9kube-controller-manager:v1.20.9kube-scheduler:v1.20.9coredns:1.7.0etcd:3.4.13-0pause:3.2)for imageName in ${images[@]} ; dodocker pull $imageNamedoneEOF</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ <span class="token function">chmod</span> +x ./images.sh <span class="token operator">&amp;&amp;</span> ./images.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="设置主节点"><a href="#设置主节点" class="headerlink" title="设置主节点"></a>设置主节点</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 所有机器添加master域名映射，以下需要修改为自己的master的内网ip地址</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ <span class="token builtin class-name">echo</span> <span class="token string">"10.140.122.4 cluster-endpoint"</span> <span class="token operator">&gt;&gt;</span> /etc/hosts<span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ <span class="token builtin class-name">echo</span> <span class="token string">"10.140.122.39 node01"</span> <span class="token operator">&gt;&gt;</span> /etc/hosts<span class="token comment"># 在其他节点可以ping通主节点</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ <span class="token function">ping</span> cluster-endpoint<span class="token comment"># 主节点运行 注意 --apiserver-advertise-address 映射的ip改成自己的</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubeadm init <span class="token punctuation">\</span>--apiserver-advertise-address<span class="token operator">=</span><span class="token number">10.140</span>.122.4 <span class="token punctuation">\</span>--control-plane-endpoint<span class="token operator">=</span>cluster-endpoint <span class="token punctuation">\</span>--image-repository registry.aliyuncs.com <span class="token punctuation">\</span>--kubernetes-version v1.20.9 <span class="token punctuation">\</span>--service-cidr<span class="token operator">=</span><span class="token number">10.96</span>.0.0/16 <span class="token punctuation">\</span>--pod-network-cidr<span class="token operator">=</span><span class="token number">192.168</span>.0.0/16<span class="token comment">## --apiserver-advertise-address  主节点的ip</span><span class="token comment">## --control-plane-endpoint       主节点的域名</span><span class="token comment">## --image-repository             镜像仓库</span><span class="token comment">## --kubernetes-version           k8s版本</span><span class="token comment">## service-cidr                   k8s内部进行负载均衡使用ip范围  不可与机器的ip有所重叠</span><span class="token comment">## --pod-network-cidr             k8s启动的pod的ip地址的范围   不可与机器的ip有所重叠</span><span class="token comment"># 保证每个配置之间的网络范围不重叠 --apiserver-advertise-address、--service-cidr、--pod-network-cidr</span><span class="token comment"># 如果这里修改了 后两个配置项的ip域，后续的 calico.yaml 文件中要进行对应修改</span><span class="token comment">## 复制保留 Your Kubernetes control-plane has initialized successfully 后面的内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="后续操作"><a href="#后续操作" class="headerlink" title="后续操作"></a>后续操作</h5><blockquote><p>根据安装后的提示选择执行部分</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># To start using your cluster, you need to run the following as a regular user:</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ <span class="token function">mkdir</span> -p <span class="token environment constant">$HOME</span>/.kube<span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ <span class="token function">cp</span> -i /etc/kubernetes/admin.conf <span class="token environment constant">$HOME</span>/.kube/config<span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ <span class="token function">chown</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> -u<span class="token variable">)</span></span><span class="token builtin class-name">:</span><span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> -g<span class="token variable">)</span></span> <span class="token environment constant">$HOME</span>/.kube/config<span class="token comment"># Alternatively, if you are the root user, you cna run:</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ <span class="token builtin class-name">export</span> <span class="token assign-left variable">KUBECONFIG</span><span class="token operator">=</span>/etc/kubernetes/admin.conf<span class="token comment"># You should now deploy a pod network to the cluster.</span><span class="token comment"># RUN "kubectl apply -f [podnetwork].yaml" with one of the options # listed at: https://kubernetes.io/docs/concepts/cluster-administration/addons</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="部署网络组件"><a href="#部署网络组件" class="headerlink" title="部署网络组件"></a>部署网络组件</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 官方文档 https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ <span class="token function">curl</span> https://docs.projectcalico.org/manifests/calico.yaml -O<span class="token comment">## 如果出现警告（k8s使用高于1.21版本）</span><span class="token comment">## Warning: policy/v1beta1 PodDisruptionBudget is deprecated in v1.21+, unavailable in v1.25+; use policy/v1 PodDisruptionBudget poddisruptionbudget.policy "calico-kube-controllers" deleted</span><span class="token comment">## 1. 原因在于policy/v1beta1 在1.22之后使用 policy/v1, 1.25正式移除，暂不影响使用，</span><span class="token comment">## 2. 如果想去除 可以修改下载的calico.yaml，找到其中的`policy/v1beta1`修改为`policy/v1`即可</span><span class="token comment"># -f 应用文件</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl apply -f calico.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="加入node节点"><a href="#加入node节点" class="headerlink" title="加入node节点"></a>加入node节点</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 根据之前的提示 将node节点加入集群</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubeadm <span class="token function">join</span> cluster-endpoint:6443 --token xxxxxxxxx<span class="token comment"># 上述的令牌只有24小时有效 过期了使用下述命令重新生成</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubeadm token create -print-join-command<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="命令小结"><a href="#命令小结" class="headerlink" title="命令小结"></a>命令小结</h5><blockquote><p>kubectl 只有在主节点有效</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 查看集群所有节点</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl get nodes<span class="token comment"># 根据配置文件，给集群创建资源</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl apply -f xxx.yaml<span class="token comment"># 查看集群部署了哪些应用</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl get pods -A<span class="token comment">## === docker ps</span><span class="token comment">## docker中叫做容器 在 k8s中叫做pos</span><span class="token comment">## kubectl get pods -A -w 保留窗口信息监控</span><span class="token comment">## watch -n 1 kubectl get pods -A</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="部署dashboard"><a href="#部署dashboard" class="headerlink" title="部署dashboard"></a>部署dashboard</h4><ol><li><strong>部署</strong></li></ol><blockquote><p>kubernetes官方提供的可视化界面</p><p><a href="https://github.com/kubernetes/dashboard">https://github.com/kubernetes/dashboard</a></p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.5.1/aio/deploy/recommended.yaml<span class="token comment"># 备注: raw.githubusercontent.com 属于外网 由于域名污染的问题 可能直接执行无法访问，可以选择在浏览器中复制上面的链接 在本地创建文件保存内容 (科学上网？)</span><span class="token comment"># 复制保存到本地后 使用命令 kubectl apply -f ./recommended.yaml 执行文件</span><span class="token comment"># 拉取dashboard镜像报CarshLoopBackoff 需要调整yaml文件两处 添加主机名 nodeName   eg. k8s_master</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>附本人github复制文件下载链接：<a href="https://github.com/RobertSunq/data/blob/master/qing/blog/hexo/kubernetes/recommended_v2.5.1.yaml" title="v2.5.1 recommended.yaml 下载链接 ">recommended</a></p></blockquote><ol start="2"><li><strong>设置访问端口</strong></li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl edit svc kubernetes-dashboard -n kubernetes-dashboard<span class="token comment"># 暴露dashboard的端口号</span><span class="token comment">### 1. 打开文件后  </span><span class="token comment">### 2. 输入 `/` </span><span class="token comment">### 3. 之后输入 `type:` ，找到文本 `type: ClusterIP` </span><span class="token comment">### 4. 修改为 NodePort</span><span class="token comment">### 5. 退出并保存</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>NodeIP： node节点的IP地址，即物理网卡的IP地址</p><p>PodIp：Pod的IP地址，即docker容器的IP地址，此为虚拟IP地址</p><p>ClusterIP：Service的IP地址，此为虚拟IP地址</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 通过公网ip访问的话需要在虚拟机或者云服务器中开放端口</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl get svc -A <span class="token operator">|</span> <span class="token function">grep</span> kubernetes-dashboard<span class="token comment">## 找到端口，在安全组放行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>之后通过:  https://集群任意IP:Port 就可以访问了</p><ol start="3"><li><strong>创建访问账号</strong></li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ <span class="token function">vim</span> dash_manager.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 创建dash_manager.yaml文件，并键入以下文本，使用kebuctl apply -f dash_manager.yaml 来创建相关账号</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ServiceAccount<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> admin   <span class="token comment"># 该处为命名空间，注意跟上面安装的dashboard配置中的命名空间相同</span>  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> kubernetes<span class="token punctuation">-</span>dashboard<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterRoleBinding<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> admin<span class="token key atrule">roleRef</span><span class="token punctuation">:</span>  <span class="token key atrule">apiGroup</span><span class="token punctuation">:</span> rbac.authorization.k8s.io  <span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterRole  <span class="token key atrule">name</span> <span class="token punctuation">:</span> cluster<span class="token punctuation">-</span>admin<span class="token key atrule">subjects</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">kind</span><span class="token punctuation">:</span> ServiceAccount  <span class="token key atrule">name</span><span class="token punctuation">:</span> admin  <span class="token comment"># 该处为命名空间，注意跟上面安装的dashboard配置中的命名空间相同</span>  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> kubernetes<span class="token punctuation">-</span>dashboard<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl apply -f dash_manager.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 如果启动失败通过下面命令查看pod信息</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl get pods,svc -n kubernetes-dashboard -o wide<span class="token comment"># 找到对应启动失败pod的name 查看详细信息 {{pod-name}}为上一步查出的问题</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl describe pod/<span class="token punctuation">{</span><span class="token punctuation">{</span>pod-name<span class="token punctuation">}</span><span class="token punctuation">}</span> -n kubernetes-dashboard<span class="token comment"># 修改后 可以从master节点重启下pod , 删除后k8s可以自动恢复</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl delete pod/<span class="token punctuation">{</span><span class="token punctuation">{</span>pod-name<span class="token punctuation">}</span><span class="token punctuation">}</span> -n kubernetes-dashboard<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2022/04/30/devops/kubernetes/0004.png" class="" title="错误演示"><ol start="4"><li><strong>令牌访问</strong></li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl -n kubernetes-dashboard get secret <span class="token variable"><span class="token variable">$(</span>kubectl -n kubernetes-dashboard get sa/admin -o <span class="token assign-left variable">jsonpath</span><span class="token operator">=</span><span class="token string">"{.secrets[0].name}"</span><span class="token variable">)</span></span> -o go-template<span class="token operator">=</span><span class="token string">"{{.data.token | base64decode}}"</span><span class="token comment"># 将输出的密钥复制保留</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="5"><li>mac上通过代理访问</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 启用代理</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl proxy  <span class="token comment"># 访问网址：http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/#!/overview?namespace=default</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="核心实战"><a href="#核心实战" class="headerlink" title="核心实战"></a>核心实战</h2><p>资源创建方式主要有两种</p><ul><li>命令行：键入命令</li><li>YAML：编写yaml文件来执行</li></ul><h3 id="Namespace"><a href="#Namespace" class="headerlink" title="Namespace"></a>Namespace</h3><blockquote><p>命名空间 ： 用来隔离资源，分组。默认只隔离资源，不隔离网络。</p></blockquote><h4 id="命令行操作"><a href="#命令行操作" class="headerlink" title="命令行操作"></a>命令行操作</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 查询命名空间</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl get namespace<span class="token comment"># [root@qing centos]$ kubectl get ns # ns 为namespace缩写</span><span class="token comment"># ----------------------------------------------------</span>NAME                   STATUS   AGEdefault                Active   6d3hkube-node-lease        Active   6d3hkube-public            Active   6d3hkube-system            Active   6d3hkubernetes-dashboard   Active   4m23s<span class="token comment"># ----------------------------------------------------</span><span class="token comment"># 获取部署的应用</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl get pods -A <span class="token comment"># -A 获取所有的应用 不添加时获取 namespace=default 下的应用</span><span class="token comment"># -n namespace 查询指定命名空间下面的应用 kubectl get pods -n kubernetes-dashboard</span><span class="token comment"># 创建命名空间</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl create ns kube-qing<span class="token comment"># 删除命名空间</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl delete ns kube-qing<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color="red">注意：删除命名空间的时候会连带删除该命名空间下的所有资源</font></p><h4 id="YAML操作"><a href="#YAML操作" class="headerlink" title="YAML操作"></a>YAML操作</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ <span class="token function">tee</span> ./kube_qing.yaml <span class="token operator">&lt;&lt;-</span><span class="token string">EOFapiVersion: v1 # 版本号kind: Namespace # 指定资源类型  命名空间metadata: # 元数据  name: kube-qingEOF</span><span class="token comment"># 应用该文件创建命名空间</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl apply -f ./kube_qing.yaml<span class="token comment"># 删除时也可以使用配置文件删除</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl delete -f ./kube_qing.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="命令小结-1"><a href="#命令小结-1" class="headerlink" title="命令小结"></a>命令小结</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 获取所有的命令空间</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl get namespace<span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl get ns<span class="token comment"># 获取部署的pod</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl get pod -A<span class="token comment"># -n {{命名空间}}  指定命名空间</span><span class="token comment"># 创建命名空间</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl create ns <span class="token punctuation">{</span><span class="token punctuation">{</span>namespace<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment"># 删除命名空间</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl create ns <span class="token punctuation">{</span><span class="token punctuation">{</span>namespace<span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h3><blockquote><p>运行中的一组容器，Pod是kubernetes中应用的最小单位</p></blockquote><p>下图中为一个pod包含两个容器组成一个小应用</p><img src="/2022/04/30/devops/kubernetes/0005.png" class="" title="pod结构"><ol><li>Pod和container都运行在以docker为基础的环境上</li><li>container（容器）为dokcer管理的单位，每个应用包装为一个容器在运行</li><li>Pod为k8s在container的基础上再包装一层用于作为最小单位用于管理，Pod中可以只包含一个容器也可以包含多个容器</li></ol><img src="/2022/04/30/devops/kubernetes/0006.png" class="" title="Pod和container"><h4 id="命令行操作-1"><a href="#命令行操作-1" class="headerlink" title="命令行操作"></a>命令行操作</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 启动一个pod</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl run qing-nginx --image<span class="token operator">=</span>nginx -n kube-qing<span class="token comment"># --image=nginx  指定镜像为nginx启动容器</span><span class="token comment"># -n 指定命名空间  不指定是为 default 命名空间</span><span class="token comment"># 包装为pod 命名为qing-nginx</span><span class="token comment"># 查看kube-qing命名空间下的pod</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl get pod -n kube-qing<span class="token comment"># 查看pod的详情  describe 描述pod</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl describe pod qing-nginx -n kube-qing<span class="token comment"># ------------------------------------------------</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.Events:  <span class="token comment"># 启动pod中的事件过程</span>  Type    Reason     Age   From               Message  ----    ------     ----  ----               -------  Normal  Scheduled  116s  default-scheduler  Successfully assigned kube-qing/qing-nginx to docker-desktop   <span class="token comment"># 116s 前 成功将任务分配给docker-desktop节点</span>  Normal  Pulling    116s  kubelet            Pulling image <span class="token string">"nginx"</span>   <span class="token comment"># 116s 前 kubelet拉取镜像</span>  Normal  Pulled     99s   kubelet            Successfully pulled image <span class="token string">"nginx"</span> <span class="token keyword">in</span> <span class="token number">16</span>.555086628s  Normal  Created    99s   kubelet            Created container qing-nginx   <span class="token comment"># 99s 前 创建容器成功</span>  Normal  Started    99s   kubelet            Started container qing-nginx   <span class="token comment"># 99s 前 启动容器成功</span><span class="token comment"># ------------------------------------------------</span><span class="token comment"># 集群环境下 该容器只会在第一步分配的节点上启动 其他节点上不会启动</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 查看日志</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl logs qing-nginx -n kube-qing<span class="token comment"># -f 追踪显示日志</span><span class="token comment"># 删除刚刚启动的pod</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl delete pod qing-nginx -n kube-qing<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="YAML操作-1"><a href="#YAML操作-1" class="headerlink" title="YAML操作"></a>YAML操作</h4><ol><li>一个pod包含一个容器</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod <span class="token comment"># 资源类型</span><span class="token key atrule">metadata</span><span class="token punctuation">:</span>   <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">run</span><span class="token punctuation">:</span> qing<span class="token punctuation">-</span>nginx  <span class="token key atrule">name</span><span class="token punctuation">:</span> qing<span class="token punctuation">-</span>nginx  <span class="token comment"># pod 的名字</span>  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> kube<span class="token punctuation">-</span>qing <span class="token comment"># 所在的命名空间</span><span class="token key atrule">spec</span><span class="token punctuation">:</span> <span class="token comment"># 所要创建的pod的详细信息</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token comment"># 指定启动的容器， 可以启动多个容器，使用多个 - image 形式</span>  <span class="token punctuation">-</span> <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx <span class="token comment"># 镜像名称</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> qing<span class="token punctuation">-</span>nginx <span class="token comment"># 容器的名字， docker ps 可查询</span>  <span class="token comment"># - image: mysql</span>  <span class="token comment">#   name: qing-mysql</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>一个pod包含多个容器</p><blockquote><p>同一个pod中共享网络空间，使用的是同一个ip地址，所以这里可以通过分别访问启动的qing-nginx-tomcat Pod的80和8080端口可以验证启动的两个容器</p><p>可以将pod类比理解为一个小的虚拟机环境，可以启动多个容器，但是容器间不能端口冲突</p></blockquote></li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod <span class="token comment"># 资源类型</span><span class="token key atrule">metadata</span><span class="token punctuation">:</span>   <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">run</span><span class="token punctuation">:</span> qing<span class="token punctuation">-</span>nginx  <span class="token key atrule">name</span><span class="token punctuation">:</span> qing<span class="token punctuation">-</span>nginx<span class="token punctuation">-</span>tomcat  <span class="token comment"># pod 的名字</span>  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> kube<span class="token punctuation">-</span>qing <span class="token comment"># 所在的命名空间</span><span class="token key atrule">spec</span><span class="token punctuation">:</span> <span class="token comment"># 所要创建的pod的详细信息</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token comment"># 指定启动的容器， 可以启动多个容器，使用多个 - image 形式</span>  <span class="token punctuation">-</span> <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx <span class="token comment"># 镜像名称</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> qing<span class="token punctuation">-</span>nginx <span class="token comment"># 容器的名字， docker ps 可查询</span>  <span class="token punctuation">-</span> <span class="token key atrule">image</span><span class="token punctuation">:</span> tomcat<span class="token punctuation">:</span>8.5.68 <span class="token comment"># 镜像名+版本</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> qing<span class="token punctuation">-</span>tomcat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动成功后</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 查看命名空间kube-qing下的pod</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl get pod -n kube-qing -o wideNAME                READY   STATUS    RESTARTS   AGE     IP          NODE             NOMINATED NODE   READINESS GATESqing-nginx          <span class="token number">1</span>/1     Running   <span class="token number">0</span>          2m34s   <span class="token number">192.168</span>.0.57   docker-desktop   <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>           <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>qing-nginx-tomcat   <span class="token number">2</span>/2     Running   <span class="token number">0</span>          2m22s   <span class="token number">192.168</span>.0.58   docker-desktop   <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>           <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span><span class="token comment"># 访问qing-nginx-tomcat中的容器</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ <span class="token function">curl</span> <span class="token number">192.168</span>.0.58:80<span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ <span class="token function">curl</span> <span class="token number">192.168</span>.0.58:8080<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="命令小结-2"><a href="#命令小结-2" class="headerlink" title="命令小结"></a>命令小结</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment">## 以下 -n 为可选参数  不指明时为 default 空间</span><span class="token comment">## 每个pod k8s都会分配一个ip</span><span class="token comment">## 集群中的任意一个机器以及任意的应用都能通过pod分配的ip来访问，但是在集群外部不能访问</span><span class="token comment"># 启动pod</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl run <span class="token punctuation">{</span><span class="token punctuation">{</span>自定义名称<span class="token punctuation">}</span><span class="token punctuation">}</span> --image<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>镜像名<span class="token punctuation">}</span><span class="token punctuation">}</span> -n <span class="token punctuation">{</span><span class="token punctuation">{</span>命名空间<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment"># 查看命名空间中的pod</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl get pod -n <span class="token punctuation">{</span><span class="token punctuation">{</span>命名空间<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment"># 描述启动中的pod</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl describe pod <span class="token punctuation">{</span><span class="token punctuation">{</span>pod名称<span class="token punctuation">}</span><span class="token punctuation">}</span> -n <span class="token punctuation">{</span><span class="token punctuation">{</span>命名空间<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment"># 删除命名空间中的pod</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl delete pod <span class="token punctuation">{</span><span class="token punctuation">{</span>pod名称<span class="token punctuation">}</span><span class="token punctuation">}</span> -n <span class="token punctuation">{</span><span class="token punctuation">{</span>命名空间<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment"># 查看pod的运行日志</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl logs <span class="token punctuation">{</span><span class="token punctuation">{</span>pod名称<span class="token punctuation">}</span><span class="token punctuation">}</span> -n <span class="token punctuation">{</span><span class="token punctuation">{</span>命名空间<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment"># 打印pod更完善的信息</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl get pod -o wide<span class="token comment"># 进入pod中容器的 /bin/bash</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl <span class="token builtin class-name">exec</span> -it qing-nigin -- /bin/bash<span class="token comment"># 监控pod的操作</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl get pod -w<span class="token comment"># 用,分割获取多种资源</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl get pod,svc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h3><blockquote><p>部署应用：控制Pod，使Pod拥有多个副本、自愈、阔缩容等能力</p></blockquote><h4 id="命令行操作-2"><a href="#命令行操作-2" class="headerlink" title="命令行操作"></a>命令行操作</h4><ol><li>创建pod</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl run mynginx --image<span class="token operator">=</span>nginx<span class="token comment"># 使用deployment创建pod</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl create deployment mytomcat --image<span class="token operator">=</span>tomcat:8.5.68<span class="token comment">## 但是使用 kubectl delete pod mytomcat-xxxx的时候 会触发自愈 重新启动一个pod </span><span class="token comment">## 想要删除的话 使用命令 kubectl delete deploy mytomcat</span><span class="token comment">## 查询所有的部署  kubectl get deploy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>启用多副本</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl create deployment qing-app --image<span class="token operator">=</span>nginx --replicas<span class="token operator">=</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>阔缩容</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 扩容</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl scale --replicas<span class="token operator">=</span><span class="token number">5</span> deployment/qing-app<span class="token comment"># 缩容 将replicas缩小</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl scale --replicas<span class="token operator">=</span><span class="token number">2</span> deployment/qing-app<span class="token comment"># 也可也直接去修改对应的YAML</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl edit deployment qing-app<span class="token comment"># 修改其中的 replicas 参数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="YAML操作-2"><a href="#YAML操作-2" class="headerlink" title="YAML操作"></a>YAML操作</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment <span class="token comment"># 资源类型 </span><span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> qing<span class="token punctuation">-</span>app  <span class="token key atrule">name</span><span class="token punctuation">:</span> qing<span class="token punctuation">-</span>app<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">3</span> <span class="token comment"># 副本个数</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> qing<span class="token punctuation">-</span>app  <span class="token key atrule">template</span><span class="token punctuation">:</span> <span class="token comment"># 副本的模版</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> qing<span class="token punctuation">-</span>app    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span> <span class="token comment"># 启动的容器</span>      <span class="token punctuation">-</span> <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx <span class="token comment"># 使用的镜像</span>        <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="自愈和故障转移"><a href="#自愈和故障转移" class="headerlink" title="自愈和故障转移"></a>自愈和故障转移</h4><p><strong>自愈</strong>：当Pod出现停机、删除Pod、容器崩溃等时，k8s可以自行重启Pod</p><p><strong>故障转移</strong>：集群状态下，如果一台机器因为断电等原因掉线，k8s在监控到这种情况后，会将这台机器上之前运行的所有Pod转移到当前集群中状态正常的节点上。</p><h4 id="滚动更新"><a href="#滚动更新" class="headerlink" title="滚动更新"></a>滚动更新</h4><blockquote><p>灰度发布</p><p>当更新某个pod时：</p><ol><li><p>先启动V2版本的Pod，此时V1版本的Pod依旧接受流量处理任务</p></li><li><p>当V2版本的Pod稳定后，会将流量请求切换到V2版本的Pod，然后关闭掉V1版本的Pod</p></li></ol></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 以Deployment中yaml部署的应用为例</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl <span class="token builtin class-name">set</span> image deployment/qing-app <span class="token assign-left variable">nginx</span><span class="token operator">=</span>nginx:1.16.1  --record<span class="token comment"># set image 设置镜像 </span><span class="token comment"># deployment/qing-app 目标应用的名称  </span><span class="token comment"># nginx=nginx:1.16.1 修改的内容</span><span class="token comment"># --record  </span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl rollout status deployment/qing-app<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 历史记录</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl rollout <span class="token function">history</span> deployment/qing-app<span class="token comment"># 查看某个历史详情</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl rollout <span class="token function">history</span> deployment/qing-app --revision<span class="token operator">=</span><span class="token number">2</span><span class="token comment"># 回滚（上个版本）</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl rollout undo deployment/qing-app<span class="token comment"># 回滚（指定版本）</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl rollout undo deployment/qing-app --to-revision<span class="token operator">=</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Deployment-StatefulSet-DaemonSet-Job-CronJob"><a href="#Deployment-StatefulSet-DaemonSet-Job-CronJob" class="headerlink" title="Deployment StatefulSet DaemonSet Job/CronJob"></a><code>Deployment</code> <code>StatefulSet</code> <code>DaemonSet</code> <code>Job/CronJob</code></h4><p><strong>延伸</strong>：</p><p>除了<code>Deployment</code>之外，k8s还有<code>StatefulSet</code>、<code>DaemonSet</code>、<code>Job</code>等类型资源。统称为<font color="blue">工作负载</font>。</p><ul><li><code>Deployment</code>：无状态应用部署，例如微服务，提供多副本等功能</li><li><code>StatefulSet</code>：有状态应用部署，例如redis，提供稳定的存储、网络等功能</li><li><code>DaemonSet</code>：守护型应用部署，例如日志收集组件，在每个机器都运行一份(有且只有一份)</li><li><code>Job</code>/<code>CronJob</code>：定时任务部署，例如垃圾清理组件，可以在指定时间运行</li></ul><p>有状态应用使用  <code>StatefulSet</code>  部署，无状态应用使用 <code>Deployment</code> 部署</p><blockquote><p><a href="https://kubernetes.io/zh/docs/concepts/workloads/controllers/">https://kubernetes.io/zh/docs/concepts/workloads/controllers/</a></p></blockquote><p>在dashboard上也有对应管理菜单页</p><img src="/2022/04/30/devops/kubernetes/0007.png" class="" title="dashboard"><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><blockquote><p>将一组Pods公开为网络服务等抽象方法。</p><p>Pod的服务发现与负载均衡</p></blockquote><img src="/2022/04/30/devops/kubernetes/0008.png" class="" title="service"><h4 id="命令行操作-3"><a href="#命令行操作-3" class="headerlink" title="命令行操作"></a>命令行操作</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 暴露Deploy 默认在集群内有效</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl expose deployment qing-app --port<span class="token operator">=</span><span class="token number">8000</span> --target-port<span class="token operator">=</span><span class="token number">80</span><span class="token comment">## deployment qing-app  --port=8000 暴露的port  指的是service的端口</span><span class="token comment">## --target-port=80  映射目标的port  指的是pods的端口</span><span class="token comment">## 后面存在默认参数 --type=ClusterIP</span><span class="token comment"># 查看服务 </span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl get <span class="token function">service</span><span class="token comment"># 使用标签检索Pod</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl get pod -l <span class="token assign-left variable">app</span><span class="token operator">=</span>qing-app<span class="token comment"># 查询pod的标签</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl get pod --show-labels<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment">#测试</span><span class="token comment"># 进入容器内部，修改/usr/share/nginx/html/index.html 文件来进行测试</span><span class="token punctuation">[</span>root@qing-tomcat-bxx<span class="token punctuation">]</span>$ <span class="token builtin class-name">echo</span> <span class="token number">1111</span> <span class="token operator">&gt;</span> /usr/share/nginx/html/index.html<span class="token comment">## 将多个pod设置为不同的值</span><span class="token comment"># 在宿主机上</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ <span class="token function">curl</span> ip:8000<span class="token comment"># 可以访问到 nginx pod的80端口的内容</span><span class="token comment"># 在容器内使用域名访问</span><span class="token punctuation">[</span>root@qing-tomcat-bxx<span class="token punctuation">]</span>$ <span class="token function">curl</span> qing-app.kube-qing.svc:8000<span class="token comment"># 组成规则 qing-app.kube-qing.svc:8000 -&gt; 服务名.命名空间.svc     -&gt; svc:service</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="YAMl操作"><a href="#YAMl操作" class="headerlink" title="YAMl操作"></a>YAMl操作</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service <span class="token comment"># 资源名称</span><span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> qing<span class="token punctuation">-</span>app  <span class="token key atrule">name</span><span class="token punctuation">:</span> qing<span class="token punctuation">-</span>app<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> qing<span class="token punctuation">-</span>app <span class="token comment"># 筛选指定的pod  名为：app  值为：qing-app</span>  <span class="token key atrule">ports</span><span class="token punctuation">:</span> <span class="token comment"># 一组port，可以配置多个</span>  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8000</span>  <span class="token comment"># 暴露的端口号 指的是service的端口</span>    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP <span class="token comment"># 端口协议</span>    <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">80</span> <span class="token comment"># 目标端口  指的是pods的端口</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ClusterIP"><a href="#ClusterIP" class="headerlink" title="ClusterIP"></a>ClusterIP</h3><blockquote><p>集群IP，只能在集群中访问。</p><p>service中操作时，默认的类型就是 clusterIP。</p></blockquote><h4 id="命令行操作-4"><a href="#命令行操作-4" class="headerlink" title="命令行操作"></a>命令行操作</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl expose deployment qing-app --port<span class="token operator">=</span><span class="token number">8000</span> --target-port<span class="token operator">=</span><span class="token number">80</span> --type<span class="token operator">=</span>ClusterIP <span class="token comment"># 只能在集群内通过 CLUSTER-IP 访问</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="YAMl操作-1"><a href="#YAMl操作-1" class="headerlink" title="YAMl操作"></a>YAMl操作</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> qing<span class="token punctuation">-</span>app  <span class="token key atrule">name</span><span class="token punctuation">:</span> qing<span class="token punctuation">-</span>app<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8000</span>    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP    <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">80</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> qing<span class="token punctuation">-</span>app  <span class="token key atrule">type</span><span class="token punctuation">:</span> ClusterIP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="NodePort"><a href="#NodePort" class="headerlink" title="NodePort"></a>NodePort</h3><blockquote><p>节点ip，集群外面也可以访问，即可以在公网中访问。</p></blockquote><h4 id="命令行操作-5"><a href="#命令行操作-5" class="headerlink" title="命令行操作"></a>命令行操作</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl expose deployment qing-app --port<span class="token operator">=</span><span class="token number">8000</span> --target-port<span class="token operator">=</span><span class="token number">80</span> --type<span class="token operator">=</span>NodePort <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2022/04/30/devops/kubernetes/0009.png" class="" title="服务列表"><p>可以看出<code>qing-app</code>的<code>PORT</code>部分多出来一个<code>30002</code>端口，由kubernetes开启，并且在所以的<code>pod</code>上面均开启。 此时就可以通过 <code>公网IP:30002</code>进行访问了</p><blockquote><p>NodePort默认范围在 30000 - 32767之间</p></blockquote><h4 id="YAMl操作-2"><a href="#YAMl操作-2" class="headerlink" title="YAMl操作"></a>YAMl操作</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> qing<span class="token punctuation">-</span>app  <span class="token key atrule">name</span><span class="token punctuation">:</span> qing<span class="token punctuation">-</span>app<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8000</span>    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP    <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">80</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> qing<span class="token punctuation">-</span>app  <span class="token key atrule">type</span><span class="token punctuation">:</span> NodePort<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Ingress"><a href="#Ingress" class="headerlink" title="Ingress"></a>Ingress</h3><blockquote><p>流量入口，是Service的统一网关入口</p><p>基于nginx实现</p><p>安装时用的<code>ingress yaml</code>只是一个声明，本身不做任何事情。如果需要实际的<code>ingress</code>功能，就需要部署<code>ingress controller</code>。这个 <code>controller</code> 也使用了 <code>LoadBalancer service type</code>，使得集群外流量通过 <code>Cloud LB</code> 可以被转发到 <code>ingress controller</code> 上。</p></blockquote><img src="/2022/04/30/devops/kubernetes/0010.png" class="" title="ingress"><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ <span class="token function">wget</span> https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.47.0/deploy/static/provider/baremetal/deploy.yaml<span class="token comment"># 如果其中镜像下载过慢，可以修改改yaml文件中images的值，指定为从国内的镜像仓库中下载</span><span class="token comment"># 检查安装的结果</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl get pod,svc -n ingress-nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>附本人github复制文件下载链接：<a href="https://github.com/RobertSunq/data/blob/master/qing/blog/hexo/kubernetes/ingress_v0.47.yaml" title="v0.47.0 ingress.yaml 下载链接 ">ingress</a></p><p>出现两个端口，分别用于 <code>http</code> 和 <code>https</code></p></blockquote><img src="/2022/04/30/devops/kubernetes/0011.png" class="" title="安装会创建service"><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><blockquote><p>官方手册：<a href="https://kubernetes.github.io/ingress-nginx/">https://kubernetes.github.io/ingress-nginx/</a></p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 创建测试环境</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ <span class="token function">vi</span> ingress-server.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> hello<span class="token punctuation">-</span>server<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">2</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> hello<span class="token punctuation">-</span>server  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> hello<span class="token punctuation">-</span>server    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> hello<span class="token punctuation">-</span>server        <span class="token comment"># todo  待修改</span>        <span class="token key atrule">image</span><span class="token punctuation">:</span> robertsunq/hello<span class="token punctuation">-</span>server        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">9000</span><span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>demo  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>demo<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">2</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>demo  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>demo    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx        <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>demo  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>demo<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>demo  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8000</span>    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP    <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">80</span><span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> hello<span class="token punctuation">-</span>server  <span class="token key atrule">name</span><span class="token punctuation">:</span> hello<span class="token punctuation">-</span>server<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> hello<span class="token punctuation">-</span>server  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8000</span>    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP    <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">9000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>域名访问</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 访问规则</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ <span class="token function">vi</span> ingress—test.yaml<span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl apply -f ingress—test.yaml<span class="token comment"># 执行后，查看ingress</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl get ingress<span class="token comment"># 注意需要将下方测试的域名映射填入到/etc/hosts文件中</span><span class="token comment"># master_ip  hello.qing.com</span><span class="token comment"># master_ip  demo.qing.com</span><span class="token comment"># 测试完后可以修改下 demo.qing.com 的映射path为 path: "/nginx"</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl edit ing ingress-host-bar<span class="token comment"># ing  ingress的缩写</span><span class="token comment"># ingress-host-bar 对应的ingress name</span><span class="token comment">#### 此时访问 demo.qing.com:31063 页面为  404 nignx</span><span class="token comment">#### 此时访问 demo.qing.com:31063/nginx 页面为  404 nignx/1.21.1</span><span class="token comment">##### 会发现第二个下面会带有版本号，</span><span class="token comment">##### 原因在于第一次访问是由ingress的nginx代理的 没有找到对应的服务pod所以返回的是ingress的404页面</span><span class="token comment">##### 第二次访问由ingress的代理找到了下属的服务nginx-demo  所以返回的是下属的服务nginx-demo对应的404页面也就是带有版本号的</span><span class="token comment"># 可以进入到nginx-demo部署下面的一个pod中</span><span class="token punctuation">[</span>root@qing nginx-demo-xxxx<span class="token punctuation">]</span>$ <span class="token builtin class-name">cd</span> /usr/share/nginx/html<span class="token punctuation">[</span>root@qing nginx-demo-xxxx<span class="token punctuation">]</span>$ <span class="token builtin class-name">echo</span> <span class="token number">1111</span> <span class="token operator">&gt;</span> nginx<span class="token comment"># 此时再去访问demo.qing.com:31063/nginx 就可以看到哥哥添加的文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.k8s.io/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Ingress  <span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>host<span class="token punctuation">-</span>bar<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">ingressClassName</span><span class="token punctuation">:</span> nginx  <span class="token key atrule">rules</span><span class="token punctuation">:</span>  <span class="token comment"># 指定域名,</span>  <span class="token punctuation">-</span> <span class="token key atrule">host</span><span class="token punctuation">:</span> <span class="token string">"hello.qing.com"</span>    <span class="token key atrule">http</span><span class="token punctuation">:</span>      <span class="token key atrule">paths</span><span class="token punctuation">:</span>      <span class="token comment"># 路径模式为 前缀</span>      <span class="token punctuation">-</span> <span class="token key atrule">pathType</span><span class="token punctuation">:</span> Prefix        <span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token string">"/"</span>        <span class="token comment"># 转发给对应服务</span>        <span class="token key atrule">backend</span><span class="token punctuation">:</span>          <span class="token key atrule">service</span><span class="token punctuation">:</span>            <span class="token key atrule">name</span><span class="token punctuation">:</span> hello<span class="token punctuation">-</span>server            <span class="token key atrule">port</span><span class="token punctuation">:</span>              <span class="token key atrule">number</span><span class="token punctuation">:</span> <span class="token number">8000</span>  <span class="token comment"># 指定域名</span>  <span class="token punctuation">-</span> <span class="token key atrule">host</span><span class="token punctuation">:</span> <span class="token string">"demo.qing.com"</span>    <span class="token key atrule">http</span><span class="token punctuation">:</span>      <span class="token key atrule">paths</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">pathType</span><span class="token punctuation">:</span> Prefix        <span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token string">"/"</span>        <span class="token comment"># path: "/nginx" # 第二次修改修改为此path 对比两次的区别 </span>        <span class="token comment">## 会将请求路径/nginx转给下面的nginx-demo服务 如果此时nginx-demo不能处理路径/nginx就会出现 404</span>        <span class="token key atrule">backend</span><span class="token punctuation">:</span>          <span class="token key atrule">service</span><span class="token punctuation">:</span>            <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>demo            <span class="token key atrule">port</span><span class="token punctuation">:</span>              <span class="token key atrule">number</span><span class="token punctuation">:</span> <span class="token number">8000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2022/04/30/devops/kubernetes/0012.png" class="" title="ingress测试示例"><p><strong>路径重写</strong></p><blockquote><p>官方示例：<a href="https://kubernetes.github.io/ingress-nginx/examples/rewrite/">https://kubernetes.github.io/ingress-nginx/examples/rewrite/</a></p></blockquote><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.k8s.io/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Ingress<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">annotations</span><span class="token punctuation">:</span>    <span class="token comment">## 重写路径  /$2  部分  即下方(/|$)(.*)捕获的部分都赋予$2</span>    <span class="token key atrule">nginx.ingress.kubernetes.io/rewrite-target</span><span class="token punctuation">:</span> /$2        <span class="token comment">## 指定该部分路径是否只可以通过SSL访问</span>    <span class="token comment"># nginx.ingress.kubernetes.io/ssl-redirect: true </span>    <span class="token comment">## 指定在未启用TLS下，也强制重定向到HTTPS</span>    <span class="token comment"># nginx.ingress.kubernetes.io/force-ssl-redirect: true</span>    <span class="token comment">## 定义重定向 上下文到 root 即访问rewrite.qing.com将重定向到 rewrite.qing.com/app1</span>    <span class="token comment"># nginx.ingress.kubernetes.io/app-root: /app1</span>    <span class="token comment">## 路径上知否使用正则</span>    <span class="token comment"># nginx.ingress.kubernetes.io/use-regex: true</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> rewrite  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">ingressClassName</span><span class="token punctuation">:</span> nginx  <span class="token key atrule">rules</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">host</span><span class="token punctuation">:</span> rewrite.qing.com    <span class="token key atrule">http</span><span class="token punctuation">:</span>      <span class="token key atrule">paths</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">path</span><span class="token punctuation">:</span> /something(/<span class="token punctuation">|</span>$)(.<span class="token important">*)</span>        <span class="token key atrule">pathType</span><span class="token punctuation">:</span> Prefix        <span class="token key atrule">backend</span><span class="token punctuation">:</span>          <span class="token key atrule">service</span><span class="token punctuation">:</span>            <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>demo            <span class="token key atrule">port</span><span class="token punctuation">:</span>               <span class="token key atrule">number</span><span class="token punctuation">:</span> <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重写后的效果为：</p><ul><li>rewrite.qing.com/something   -&gt; rewrite.qing.com/</li><li>rewrite.qing.com/something/   -&gt; rewrite.qing.com/</li><li>rewrite.qing.com/something/new   -&gt; rewrite.qing.com/new</li></ul><p><strong>流量限制</strong></p><blockquote><p>官方示例：<a href="https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/#rate-limiting">https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/#rate-limiting</a></p></blockquote><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.k8s.io/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Ingress<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>limit<span class="token punctuation">-</span>rate  <span class="token key atrule">annotations</span><span class="token punctuation">:</span>    <span class="token key atrule">nginx.ingress.kubernetes.io/limit-rps</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">ingressClassName</span><span class="token punctuation">:</span> nginx  <span class="token key atrule">rules</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">host</span><span class="token punctuation">:</span> <span class="token string">"haha.qing.com"</span>    <span class="token key atrule">http</span><span class="token punctuation">:</span>      <span class="token key atrule">paths</span><span class="token punctuation">:</span>        <span class="token comment"># 精确模式</span>      <span class="token punctuation">-</span> <span class="token key atrule">pathType</span><span class="token punctuation">:</span> Exact        <span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token string">"/"</span>        <span class="token key atrule">backend</span><span class="token punctuation">:</span>          <span class="token key atrule">service</span><span class="token punctuation">:</span>            <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>demo            <span class="token key atrule">port</span><span class="token punctuation">:</span>              <span class="token key atrule">number</span><span class="token punctuation">:</span> <span class="token number">8000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="网络模型简述"><a href="#网络模型简述" class="headerlink" title="网络模型简述"></a>网络模型简述</h3><ul><li>所有的<code>Pod</code>属于<code>Pod</code>层，相互之间是网络共同的，其<code>IP</code>地址的区间为上面设置主节点配置时设置<code>--pod-network-cidr=192.168.0.0/16</code></li><li>根据<code>Pod</code>的功能属性氛围不同的<code>service</code>，<code>service</code>之间的网络也是相关联通的，而且与所有的<code>pod</code>之间网络联通，，其<code>IP</code>地址的区间为上面设置主节点配置时设置<code>--service-cidr=10.96.0.0/16</code></li><li><code>pod</code>之间可以相互直接访问，也可以通过其所属的<code>service</code>访问其他的<code>pod</code></li><li>外部请求流量通常是经由<code>LB</code>之后到达<code>Ingress</code>层做网关流量管控，之后在发送给对应的<code>serivce</code>来调用其具体的<code>pod</code>功能支持</li></ul><img src="/2022/04/30/devops/kubernetes/0013.png" class="" title="网络简述"><h3 id="存储抽象"><a href="#存储抽象" class="headerlink" title="存储抽象"></a>存储抽象</h3><p>原始的容器挂载目录在宿主机上，但是现在<code>kubernetes</code>在集群环境下，在不同的机器上启动<code>pod</code>，如果其中<code>C</code>机器上的一个<code>pod</code>出现问题退出了，由于故障转移的机制<code>kubernetes</code>可能会在<code>B</code>机器上新建这个出问题的<code>pod</code>，这时<code>pod</code>所挂载的目录就是在两台机器上了，存在物理上的隔离。</p><img src="/2022/04/30/devops/kubernetes/0014.png" class="" title="内存抽象"><p><strong>环境准备</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 所有机器安装 nfs文件管理工具</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ yum <span class="token function">install</span> -y nfs-utils<span class="token comment"># 主节点设置 </span><span class="token comment">############</span><span class="token comment"># 挂载nfs，以下是配置</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ <span class="token builtin class-name">echo</span> <span class="token string">"/nfs/data/ *(insecure,rw,sync,no_root_squash)"</span> <span class="token operator">&gt;</span> /etc/exports<span class="token comment"># /nfs/data/ 需要暴露的目录 </span><span class="token comment"># * 所有人可以同步</span><span class="token comment"># insecure,rw,sync,no_root_squash 同步的方式</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ <span class="token function">mkdir</span> -p /nfs/data<span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ systemctl <span class="token builtin class-name">enable</span> rpcbind --now<span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ systemctl <span class="token builtin class-name">enable</span> nfs-server --now<span class="token comment"># 配置生效</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ exportfs -r<span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ exportfs/nfs/data<span class="token operator">&lt;</span>world<span class="token operator">&gt;</span><span class="token comment">############</span><span class="token comment"># 从节点设置,挂载主节点的nfs目录</span><span class="token comment">############</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ showmount -e <span class="token punctuation">{</span><span class="token punctuation">{</span>主节点IP<span class="token punctuation">}</span><span class="token punctuation">}</span>Export list <span class="token keyword">for</span> <span class="token number">172.1</span>.1.1/nfs/data *<span class="token comment">#挂载 nfs 服务器上的共享目录到本机路径 /root/nfsmount</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ <span class="token function">mkdir</span> -p /nfs/data_bak<span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ <span class="token function">mount</span> -t nfs <span class="token punctuation">{</span><span class="token punctuation">{</span>主节点IP<span class="token punctuation">}</span><span class="token punctuation">}</span>:/nfs/data /nfs/data_bak<span class="token comment"># {{主节点IP}}:/nfs/data 挂载到当前机器的 /nfs/data_bak目录</span><span class="token comment"># 写入一个测试文件</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ <span class="token builtin class-name">echo</span> <span class="token string">"hello nfs server"</span> <span class="token operator">&gt;</span> /nfs/data/test.txt<span class="token comment">############</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="原生方式数据挂载"><a href="#原生方式数据挂载" class="headerlink" title="原生方式数据挂载"></a>原生方式数据挂载</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>pv<span class="token punctuation">-</span>demo  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>pv<span class="token punctuation">-</span>demo<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token comment"># 数量</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">2</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>pv<span class="token punctuation">-</span>demo  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>pv<span class="token punctuation">-</span>demo    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token comment"># nginx 镜像容器</span>      <span class="token punctuation">-</span> <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx        <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx        <span class="token comment"># 卷挂载</span>        <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> html          <span class="token comment"># 容器的内部目录</span>          <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /usr/share/nginx/html      <span class="token key atrule">volumes</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> html          <span class="token comment"># 挂载方式  nfs</span>          <span class="token key atrule">nfs</span><span class="token punctuation">:</span>            <span class="token key atrule">server</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>主节点IP<span class="token punctuation">}</span><span class="token punctuation">}</span>            <span class="token comment"># 宿主机的目标路径</span>            <span class="token key atrule">path</span><span class="token punctuation">:</span> /nfs/data/nginx<span class="token punctuation">-</span>pv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>执行可能会出错，提示/nfs/data/nginx-pv不存在， 需要在宿主机上创建该目录重启</p></blockquote><h4 id="PV-amp-PVC"><a href="#PV-amp-PVC" class="headerlink" title="PV&amp;PVC"></a>PV&amp;PVC</h4><blockquote><p>PV：持久卷（Persistent Volume），将应用需要持久化的数据保存到指定位置</p><p>PVC：持久卷申明（Persistent Volume Claim），申明需要使用到持久卷规格，用来在PV中申请区间，也可以删除该申明来从PV中删除存储的内容</p></blockquote><h5 id="PV"><a href="#PV" class="headerlink" title="PV"></a>PV</h5><p><strong>创建PV池</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 主节点创建几块目录</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ <span class="token function">mkdir</span> -p /nfs/data/01<span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ <span class="token function">mkdir</span> -p /nfs/data/02<span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ <span class="token function">mkdir</span> -p /nfs/data/03<span class="token comment"># 查询当前所有的PV</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kebectl get <span class="token function">pv</span><span class="token comment"># pv PersistentVolume</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>创建PV</strong></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> PersistentVolume <span class="token comment"># 持久化卷</span><span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pv01<span class="token punctuation">-</span>10m<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">capacity</span><span class="token punctuation">:</span>    <span class="token comment"># 容量, 静态供应，容量固定</span>    <span class="token key atrule">storage</span><span class="token punctuation">:</span> 10M  <span class="token comment"># 权限模式</span>  <span class="token key atrule">accessModes</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> ReadWriteMany  <span class="token comment"># 存储空间明</span>  <span class="token key atrule">storageClassName</span><span class="token punctuation">:</span> nfs  <span class="token key atrule">nfs</span><span class="token punctuation">:</span>    <span class="token comment"># 路径</span>    <span class="token key atrule">path</span><span class="token punctuation">:</span> /nfs/data/01    <span class="token key atrule">server</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>主节点IP<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment"># 通过 --- 分割每部分的内容</span><span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> PersistentVolume<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pv02<span class="token punctuation">-</span>1gi<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">capacity</span><span class="token punctuation">:</span>    <span class="token key atrule">storage</span><span class="token punctuation">:</span> 1Gi  <span class="token key atrule">accessModes</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> ReadWriteMany  <span class="token key atrule">storageClassName</span><span class="token punctuation">:</span> nfs  <span class="token key atrule">nfs</span><span class="token punctuation">:</span>    <span class="token key atrule">path</span><span class="token punctuation">:</span> /nfs/data/02    <span class="token key atrule">server</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>主节点IP<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> PersistentVolume<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pv03<span class="token punctuation">-</span>3gi<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">capacity</span><span class="token punctuation">:</span>    <span class="token key atrule">storage</span><span class="token punctuation">:</span> 3Gi  <span class="token key atrule">accessModes</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> ReadWriteMany  <span class="token key atrule">storageClassName</span><span class="token punctuation">:</span> nfs  <span class="token key atrule">nfs</span><span class="token punctuation">:</span>    <span class="token key atrule">path</span><span class="token punctuation">:</span> /nfs/data/03    <span class="token key atrule">server</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>主节点IP<span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="PVC"><a href="#PVC" class="headerlink" title="PVC"></a>PVC</h5><p><strong>创建PVC</strong></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">kind</span><span class="token punctuation">:</span> PersistentVolumeClaim <span class="token comment"># 资源类型 申请书</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>pvc<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">accessModes</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> ReadWriteMany  <span class="token key atrule">resources</span><span class="token punctuation">:</span>    <span class="token key atrule">requests</span><span class="token punctuation">:</span>      <span class="token key atrule">storage</span><span class="token punctuation">:</span> 200Mi  <span class="token key atrule">storageClassName</span><span class="token punctuation">:</span> nfs  <span class="token comment"># 与PV中穿件的存储空间名字相同</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>创建Pod绑定PVC</strong></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>deploy<span class="token punctuation">-</span>pvc  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>deploy<span class="token punctuation">-</span>pvc<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">2</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>deploy<span class="token punctuation">-</span>pvc  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>deploy<span class="token punctuation">-</span>pvc    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx        <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx        <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> html          <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /usr/share/nginx/html      <span class="token key atrule">volumes</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> html         <span class="token comment"># 不是指定nfs 而是指定PVC去挂载申请到的目录</span>          <span class="token key atrule">persistentVolumeClaim</span><span class="token punctuation">:</span>            <span class="token key atrule">claimName</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>pvc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ConfigMap"><a href="#ConfigMap" class="headerlink" title="ConfigMap"></a>ConfigMap</h3><blockquote><p>配置集，抽取应用配置，并且可以自动更新</p><ol><li>现将需要使用的配置 制作成 configMap</li><li>创建pod时饮用配置集</li></ol></blockquote><ol><li>将配置文件创建为ConfigMap</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 创建文件</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ <span class="token function">tee</span> ./redis.conf <span class="token operator">&lt;&lt;-</span><span class="token string">EOF# rddis 数据需要持久化存储appendonly yesEOF</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl create cm redis-conf --from-file<span class="token operator">=</span>redis.conf<span class="token comment"># cm   --&gt; comfigMap 缩写</span><span class="token comment"># --from-file  由什么文件制作配置集</span><span class="token comment"># 查询配置集</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl get cmNAME               DATA   AGEredis-conf   <span class="token number">1</span>      8s<span class="token comment"># 查询配置集</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl get cm redis-conf -oyaml<span class="token comment"># -oyaml 以 yaml形式 输出 redis-conf 配置集</span><span class="token comment"># 下面为该命令的输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token comment"># data配置下 才是真实的数据 key -&gt; 文件名，value -&gt; 配置文件</span><span class="token key atrule">data</span><span class="token punctuation">:</span>  <span class="token comment"># 默认是文件名 </span>  <span class="token key atrule">redis.conf</span><span class="token punctuation">:</span> <span class="token punctuation">|</span>  <span class="token comment"># 下方是配置文件中的内容</span>    <span class="token comment"># redis 数据需要持久化存储</span>    appendonly yes<span class="token key atrule">kind</span><span class="token punctuation">:</span> ConfigMap  <span class="token comment"># 资源类型为配置集</span><span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">creationTimestamp</span><span class="token punctuation">:</span> <span class="token string">"2022-05-11T11:16:32Z"</span> <span class="token comment"># 创建时间</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>conf  <span class="token comment"># 创建配置的名称</span>  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default <span class="token comment"># 命名空间</span>  <span class="token key atrule">resourceVersion</span><span class="token punctuation">:</span> <span class="token string">"439924"</span>  <span class="token key atrule">uid</span><span class="token punctuation">:</span> adf679dd<span class="token punctuation">-</span>f040<span class="token punctuation">-</span>437c<span class="token punctuation">-</span>bffd<span class="token punctuation">-</span>7f5effb521ec<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>创建Pod</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 使用docker 加载自定义的配置启动</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ docker run -v /data/redis/redis.conf:/etc/redis/redis.conf <span class="token punctuation">\</span>-v /data/redis/data:/data <span class="token punctuation">\</span>-d --name myredis <span class="token punctuation">\</span>-p <span class="token number">6379</span>:6379 <span class="token punctuation">\</span>redis:latest redis-server /etc/redis/redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p> kubernetes yaml文件版</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">apiVersion: v1kind: Podmetadata:  name: redisspec:  containers:  - name: redis    image: redis    command:      - redis-server      <span class="token comment"># redis容器内部的位置 加载的配置文件</span>      - <span class="token string">"/redis-master/redis.conf"</span>      ports:    - containerPort: <span class="token number">6379</span>    <span class="token comment"># 卷挂载</span>    volumeMounts:    <span class="token comment"># 容器内的数据目录 /data</span>    - mountPath: /data      name: data    <span class="token comment"># 容器内的配置目录 挂载方式在下方定义</span>    - mountPath: /redis-master      name: config  <span class="token comment"># 宿主机中的卷</span>  volumes:    <span class="token comment"># 宿主机的对应配置</span>    - name: data      <span class="token comment"># 随机分配一个空目录</span>      emptyDir: <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token comment"># 对应上面 名为 config 的配置文件挂载</span>    - name: config      <span class="token comment"># 配置文件是从配置集中获取</span>      configMap:        <span class="token comment"># 要使用的配置集名称</span>        name: redis-conf        <span class="token comment"># 获取配置集中 data的那些项</span>        items:        <span class="token comment"># 引入 redis-conf 配置集中 data 下 key为 redis.conf的配置</span>        - key: redis.conf          <span class="token comment"># 指定上方通过key获取到的配置 放到什么目录下,在容器的/redis-master创建redis.conf</span>          path: redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2022/04/30/devops/kubernetes/0015.png" class="" title="配置集图示"><ol start="3"><li>检查默认配置</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl <span class="token builtin class-name">exec</span> -it redis -- redis-cli<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> CONFIG GET appendonly<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> CONFIG GET requirepass<span class="token comment"># 修改配置集</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl edit cm redis-conf<span class="token comment">#####  以下为修改后的内容  ######</span>apiVersion: v1<span class="token comment"># data配置下 才是真实的数据 key -&gt; 文件名，value -&gt; 配置文件</span>data:  <span class="token comment"># 默认是文件名 </span>  redis.conf: <span class="token operator">|</span>  <span class="token comment"># 下方是配置文件中的内容</span>    <span class="token comment"># redis 数据需要持久化存储</span>    appendonly <span class="token function">yes</span>    <span class="token comment"># 添加密码配置</span>    requirepass <span class="token number">123456</span>kind: ConfigMap  <span class="token comment"># 资源类型为配置集</span>metadata:  creationTimestamp: <span class="token string">"2022-05-11T11:16:32Z"</span> <span class="token comment"># 创建时间</span>  name: redis-conf  <span class="token comment"># 创建配置的名称</span>  namespace: default <span class="token comment"># 命名空间</span>  resourceVersion: <span class="token string">"439924"</span>  uid: adf679dd-f040-437c-bffd-7f5effb521ec<span class="token comment">#####  以上为修改后的内容  ######</span><span class="token comment"># 修改后等待片刻 重启完成后就可以看到修改</span><span class="token comment"># 进入容器内 </span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl <span class="token builtin class-name">exec</span> -it redis -- bin/bash<span class="token comment"># 查看配置文件，可以看到Pod具有热更新的能力</span><span class="token punctuation">[</span>root@qing redis-xxxx<span class="token punctuation">]</span> <span class="token function">cat</span> /redis-master/redis.conf  <span class="token comment"># 或者可以直接进入容器的 的 redis 客户端</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl <span class="token builtin class-name">exec</span> -it redis -- redis-cli<span class="token comment"># 输入下面的命令</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> CONFIG GET appendonly<span class="token comment"># 这里没有更新 是因为pod需要重启 redis才可以生效，</span><span class="token comment"># pod中部署的 中间件 自己没有热更新的能力</span><span class="token number">27.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> CONFIG GET requirepass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Secret"><a href="#Secret" class="headerlink" title="Secret"></a>Secret</h3><blockquote><p>Secret 对象类型用来保存敏感信息，例如密码、OAuth 令牌和 SSH 密钥。 将这些信息放在 secret 中比放在 <a href="https://kubernetes.io/docs/concepts/workloads/pods/pod-overview/">Pod</a> 的定义或者 <a href="https://kubernetes.io/zh/docs/reference/glossary/?all=true#term-image">容器镜像</a>中来说更加安全和灵活。</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># kubectl create secret 创建密钥信息</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl create secret docker-registry qing-docker <span class="token punctuation">\</span>--docker-username<span class="token operator">=</span>qing <span class="token punctuation">\</span>--docker-password<span class="token operator">=</span>qing123456 <span class="token punctuation">\</span>--docker-email<span class="token operator">=</span><span class="token number">111111</span>@qq.com<span class="token comment">### 格式说明</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl create secret docker-registry regcred <span class="token punctuation">\</span>  --docker-server<span class="token operator">=</span><span class="token operator">&lt;</span>镜像仓库服务器<span class="token operator">&gt;</span> <span class="token punctuation">\</span>  --docker-username<span class="token operator">=</span><span class="token operator">&lt;</span>用户名<span class="token operator">&gt;</span> <span class="token punctuation">\</span>  --docker-password<span class="token operator">=</span><span class="token operator">&lt;</span>密码<span class="token operator">&gt;</span> <span class="token punctuation">\</span>  --docker-email<span class="token operator">=</span><span class="token operator">&lt;</span>邮箱地址<span class="token operator">&gt;</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl get secret<span class="token comment"># 查看对应的yaml文件 可以发现是被加密的</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ kubectl get secret qing-docker -oyaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> private<span class="token punctuation">-</span>nginx<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> private<span class="token punctuation">-</span>nginx    <span class="token comment"># 该镜像为私有 需要账号密码下载</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> qing/privatengin<span class="token punctuation">:</span>v1.0  <span class="token key atrule">imagePullSecrets</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> qing<span class="token punctuation">-</span>docker <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><blockquote><p>【尚硅谷】 <a href="https://b23.tv/D8L82Jz">https://b23.tv/D8L82Jz</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> command </tag>
            
            <tag> note </tag>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker compose教程</title>
      <link href="/2022/01/05/devops/docker-compose/"/>
      <url>/2022/01/05/devops/docker-compose/</url>
      
        <content type="html"><![CDATA[<h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><ul><li>Docker Compose<ul><li>安装</li><li>Demo测试</li><li>compose yaml规则</li><li>测试开源项目</li><li>简单实战</li></ul></li></ul><h2 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h2><blockquote><p>来轻松高效的管理容器，对多个容器进行管理，批量容器编排。</p><p>通过docker-compose编写yaml配置文件，进行一键启动多个相互配置的镜像以及网络配置。</p></blockquote><hr><p>Compose is a tool for defining and running multi-container Docker applications. With Compose, you use a YAML file to configure your application’s services. Then, with a single command, you create and start all the services from your configuration. To learn more about all the features of Compose, see <a href="https://docs.docker.com/compose/#features">the list of features</a>.</p><p>Compose works in all environments: production, staging, development, testing, as well as CI workflows. You can learn more about each case in <a href="https://docs.docker.com/compose/#common-use-cases">Common Use Cases</a>.</p><p>Using Compose is basically a three-step process:</p><ol><li>Define your app’s environment with a <code>Dockerfile</code> so it can be reproduced anywhere.</li><li>Define the services that make up your app in <code>docker-compose.yml</code> so they can be run together in an isolated environment.</li><li>Run <code>docker compose up</code> and the <a href="https://docs.docker.com/compose/cli-command/">Docker compose command</a> starts and runs your entire app. You can alternatively run <code>docker-compose up</code> using the docker-compose binary.</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3.9"</span>  <span class="token comment"># optional since v1.27.0</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">web</span><span class="token punctuation">:</span>    <span class="token key atrule">build</span><span class="token punctuation">:</span> .    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"5000:5000"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> .<span class="token punctuation">:</span>/code      <span class="token punctuation">-</span> logvolume01<span class="token punctuation">:</span>/var/log    <span class="token key atrule">links</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> redis  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis<span class="token key atrule">volumes</span><span class="token punctuation">:</span>  <span class="token key atrule">logvolume01</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>概念说明</strong></p><ul><li>服务services：容器，应用。（web、redis、mysql……）</li><li>项目project：一组关联的容器组成一个完整的业务单元<ul><li>通过使用docker-compose up来启动多个服务是的项目的正常运行</li></ul></li></ul><hr><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><blockquote><p>其他平台的安装详见官网：<a href="https://docs.docker.com/compose/install/">https://docs.docker.com/compose/install/</a></p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 下载[root@qing centos]$ curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose# 下载过慢时，备用地址[root@qing centos]$ curl -L https://get.daocloud.io/docker/compose/releases/download/v2.2.2/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose# 授权[root@qing centos]$ chmod +x /usr/local/bin/docker-compose# 查看版本，验证是否安装成功[root@qing centos]$ docker-compose versionDocker Compose version v2.2.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Demo测试"><a href="#Demo测试" class="headerlink" title="Demo测试"></a>Demo测试</h3><blockquote><p>demo来自官网文档：<a href="https://docs.docker.com/compose/gettingstarted/">https://docs.docker.com/compose/gettingstarted/</a></p></blockquote><h4 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h4><ol><li><p>创建项目目录</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@qing centos]$ cd /home/qing[root@qing centos]$ mkdir composetest[root@qing centos]$ cd composetest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>创建python应用<code>app.py</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@qing centos]$ vim app.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该项目Demo中，<code>redis</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> redis <span class="token comment"># 导入redis</span><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flaskapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>cache <span class="token operator">=</span> redis<span class="token punctuation">.</span>Redis<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'redis'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">)</span> <span class="token comment"># 使用redis缓存 端口号为6379</span><span class="token keyword">def</span> <span class="token function">get_hit_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 对cache进行自增</span>    retries <span class="token operator">=</span> <span class="token number">5</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> cache<span class="token punctuation">.</span>incr<span class="token punctuation">(</span><span class="token string">'hits'</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> redis<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>ConnectionError <span class="token keyword">as</span> exc<span class="token punctuation">:</span>            <span class="token keyword">if</span> retries <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">raise</span> exc            retries <span class="token operator">-=</span> <span class="token number">1</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token comment"># 访问页面返回字符串 并调用cache自增</span><span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    count <span class="token operator">=</span> get_hit_count<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'Hello World! I have been seen {} times.\n'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建依赖说明<code>requirements.txt</code></p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">flaskredis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h4 id="创建Dockerfile"><a href="#创建Dockerfile" class="headerlink" title="创建Dockerfile"></a>创建Dockerfile</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@qing centos]$ vim Dockerfile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile"># syntax=docker/dockerfile:1FROM python:3.7-alpine # 基本环境包WORKDIR /code # 工作目录ENV FLASK_APP=app.py # 环境ENV FLASK_RUN_HOST=0.0.0.0RUN apk add --no-cache gcc musl-dev linux-headers # 运行COPY requirements.txt requirements.txt # 复制文件RUN pip install --upgrade pipRUN pip install -r requirements.txt # 使用pip安装EXPOSE 5000 # 暴露端口COPY . .CMD ["flask", "run"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="在Compose-file中定义服务"><a href="#在Compose-file中定义服务" class="headerlink" title="在Compose file中定义服务"></a>在Compose file中定义服务</h4><p>创建一个<code>docker-compose.yml</code>文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@qing centos]$ vim docker-compose.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3.9"</span> <span class="token comment"># 说明版本</span><span class="token key atrule">services</span><span class="token punctuation">:</span> <span class="token comment"># 两个服务 web和redis</span>  <span class="token key atrule">web</span><span class="token punctuation">:</span>    <span class="token key atrule">build</span><span class="token punctuation">:</span> . <span class="token comment"># 通 docker build 使用Dockerfile生成一个镜像</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"5000:5000"</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">"redis:alpine"</span> <span class="token comment"># 使用官方提供的镜像</span><span class="token comment"># 该compose定义了两个服务 web redis</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用Compose构建并启动应用"><a href="#使用Compose构建并启动应用" class="headerlink" title="使用Compose构建并启动应用"></a>使用Compose构建并启动应用</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@qing centos]$ docker-compose up # 使用compose启动引用并运行##### 此处输出细节由于部分原因未保存，故不作具体展示，大概过程如下##### 下载redis镜像##### 根据Dockefile生成镜像##### 启动两个应用##### composetest-redis-1  | 1:M 06 Jan 2022 15:14:00.396 * Ready to accept connections##### composetest-web-1    |  * Running on http://172.19.0.2:5000/ (Press CTRL+C to quit)# 新打开ssh连接[root@qing centos]$ docker ps # 可以查看到两个容器正在运行CONTAINER ID   IMAGE             COMMAND                  CREATED        STATUS         PORTS                                       NAMESeab226264027   redis:alpine      "docker-entrypoint.s…"   23 hours ago   Up 4 minutes   6379/tcp                                    composetest-redis-1df7060ac4312   composetest_web   "flask run"              23 hours ago   Up 4 minutes   0.0.0.0:5000-&gt;5000/tcp, :::5000-&gt;5000/tcp   composetest-web-1[root@qing centos]$ curl localhost:5000Hello World! I have been seen 1 times.  # 测试访问，服务正常[root@qing centos]$ curl localhost:5000Hello World! I have been seen 2 times.[root@qing centos]$ docker images # 会自动根据配置下载镜像，而不用手动的一个一个去pullREPOSITORY        TAG                IMAGE ID       CREATED         SIZEcomposetest_web   latest             29a58f03ba24   23 hours ago    185MBredis             alpine             3900abf41552   5 weeks ago     32.4MBpython            3.7-alpine         a1034fd13493   5 weeks ago     41.8MB[root@qing centos]$ docker network ls # 通过compose启动的容器实例会自动创建一个网络，把所有的容器放在同一个容器下NETWORK ID     NAME                  DRIVER    SCOPE7d8581eaa5e7   composetest_default   bridge    local<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>因此，在<code>app.py</code>中，可以通过redis的服务名来进行连接，因为在同一个网络下。</p></blockquote><img src="/2022/01/05/devops/docker-compose/0001.png" class="" title="示例"><h4 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 在工作目录下[root@qing centos]$ cd /home/qing/composetest# 方式一[root@qing centos]$ docker-compose stop # 方式二[root@qing centos]$ docker-compose down --volumes# 方式三# 在启动的地方 Ctrl+C<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="compose-yaml规则"><a href="#compose-yaml规则" class="headerlink" title="compose yaml规则"></a>compose yaml规则</h3><blockquote><p>官网文档说明：<a href="https://docs.docker.com/compose/compose-file/compose-file-v3/">https://docs.docker.com/compose/compose-file/compose-file-v3/</a></p></blockquote><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 三层结构</span><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3.9"</span> <span class="token comment"># 版本号</span><span class="token key atrule">services</span><span class="token punctuation">:</span> <span class="token comment"># 服务</span>  <span class="token comment"># 服务配置</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis<span class="token punctuation">:</span>alpine <span class="token comment"># 镜像</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span> <span class="token comment"># 暴露的端口号(多)</span>      <span class="token punctuation">-</span> <span class="token string">"6379"</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span> <span class="token comment"># 设置要加入的网络(多)，网络配置文件中配置，也可以基于已有网络？</span>      <span class="token punctuation">-</span> frontend      <span class="token punctuation">-</span> other<span class="token punctuation">-</span>network    <span class="token key atrule">deploy</span><span class="token punctuation">:</span> <span class="token comment"># 部署运行时的配置</span>      <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">2</span> <span class="token comment"># 副本，指定给定时间内的容器运行数量</span>      <span class="token key atrule">update_config</span><span class="token punctuation">:</span> <span class="token comment"># 配置服务如何更新</span>        <span class="token key atrule">parallelism</span><span class="token punctuation">:</span> <span class="token number">2</span> <span class="token comment"># 一次更新的容器数量</span>        <span class="token key atrule">delay</span><span class="token punctuation">:</span> 10s <span class="token comment"># 更新一组容器间的等待时间</span>      <span class="token key atrule">restart_policy</span><span class="token punctuation">:</span> <span class="token comment"># 配置如何重启服务</span>        <span class="token key atrule">condition</span><span class="token punctuation">:</span> on<span class="token punctuation">-</span>failure <span class="token comment"># 失败是，eg. none/any</span>  <span class="token comment"># 服务配置</span>  <span class="token key atrule">db</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> postgres<span class="token punctuation">:</span><span class="token number">9.4</span> <span class="token comment"># 镜像</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span> <span class="token comment"># 配置挂载卷  宿主机 : 容器目录</span>      <span class="token punctuation">-</span> db<span class="token punctuation">-</span>data<span class="token punctuation">:</span>/var/lib/postgresql/data <span class="token comment"># 该方式需要在下方定义 交予docker默认挂载卷下管理 即具名挂载  通过 docker volume管理</span>      <span class="token comment"># - /data/qing/postgresql/data:/var/lib/postgresql/data # 也可以设置直接路径</span>      <span class="token comment"># - $PWD:/var/lib/postgresql/data # 特殊用法 $PWD 宿主机当前目录</span>      <span class="token comment"># - $(pwd):/var/lib/postgresql/data # 特殊用法 $(pwd)宿主机当前目录</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span> <span class="token comment"># 设置要加入的网络(多)</span>      <span class="token punctuation">-</span> backend    <span class="token key atrule">deploy</span><span class="token punctuation">:</span> <span class="token comment"># 部署运行时的配置</span>      <span class="token key atrule">placement</span><span class="token punctuation">:</span> <span class="token comment"># 设置约束和首选项</span>        <span class="token key atrule">max_replicas_per_node</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token comment"># 限制一个节点上运行的副本数量</span>        <span class="token key atrule">constraints</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> <span class="token string">"node.role==manager"</span> <span class="token comment"># 通过约束表达式，限制节点的容器</span>  <span class="token comment"># 服务配置</span>  <span class="token key atrule">vote</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> dockersamples/examplevotingapp_vote<span class="token punctuation">:</span>before    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"5000:80"</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> frontend    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span> <span class="token comment"># 依赖关系，在启动该服务之前，保证以下服务在其之前启动</span>      <span class="token punctuation">-</span> redis    <span class="token key atrule">deploy</span><span class="token punctuation">:</span>      <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">2</span>      <span class="token key atrule">update_config</span><span class="token punctuation">:</span>        <span class="token key atrule">parallelism</span><span class="token punctuation">:</span> <span class="token number">2</span>      <span class="token key atrule">restart_policy</span><span class="token punctuation">:</span>        <span class="token key atrule">condition</span><span class="token punctuation">:</span> on<span class="token punctuation">-</span>failure  <span class="token comment"># 服务配置</span>  <span class="token key atrule">result</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> dockersamples/examplevotingapp_result<span class="token punctuation">:</span>before    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"5001:80"</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> backend    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span> <span class="token comment"># 依赖关系，在启动该服务之前，保证以下服务在其之前启动</span>      <span class="token punctuation">-</span> db    <span class="token key atrule">deploy</span><span class="token punctuation">:</span>      <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>      <span class="token key atrule">update_config</span><span class="token punctuation">:</span>        <span class="token key atrule">parallelism</span><span class="token punctuation">:</span> <span class="token number">2</span>        <span class="token key atrule">delay</span><span class="token punctuation">:</span> 10s      <span class="token key atrule">restart_policy</span><span class="token punctuation">:</span>        <span class="token key atrule">condition</span><span class="token punctuation">:</span> on<span class="token punctuation">-</span>failure  <span class="token comment"># 服务配置</span>  <span class="token key atrule">worker</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> dockersamples/examplevotingapp_worker    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> frontend      <span class="token punctuation">-</span> backend    <span class="token key atrule">deploy</span><span class="token punctuation">:</span> <span class="token comment"># 部署</span>      <span class="token key atrule">mode</span><span class="token punctuation">:</span> replicated      <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>APP=VOTING<span class="token punctuation">]</span>      <span class="token key atrule">restart_policy</span><span class="token punctuation">:</span>        <span class="token key atrule">condition</span><span class="token punctuation">:</span> on<span class="token punctuation">-</span>failure        <span class="token key atrule">delay</span><span class="token punctuation">:</span> 10s        <span class="token key atrule">max_attempts</span><span class="token punctuation">:</span> <span class="token number">3</span>        <span class="token key atrule">window</span><span class="token punctuation">:</span> 120s      <span class="token key atrule">placement</span><span class="token punctuation">:</span>        <span class="token key atrule">constraints</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> <span class="token string">"node.role==manager"</span>  <span class="token comment"># 服务配置</span>  <span class="token key atrule">visualizer</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> dockersamples/visualizer<span class="token punctuation">:</span>stable    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"8080:8080"</span>    <span class="token key atrule">stop_grace_period</span><span class="token punctuation">:</span> 1m30s    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"/var/run/docker.sock:/var/run/docker.sock"</span>    <span class="token key atrule">deploy</span><span class="token punctuation">:</span>      <span class="token key atrule">placement</span><span class="token punctuation">:</span>        <span class="token key atrule">constraints</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> <span class="token string">"node.role==manager"</span><span class="token comment"># 网络配置</span><span class="token key atrule">networks</span><span class="token punctuation">:</span>  <span class="token key atrule">frontend</span><span class="token punctuation">:</span>  <span class="token key atrule">backend</span><span class="token punctuation">:</span><span class="token comment"># 挂载卷配置</span><span class="token key atrule">volumes</span><span class="token punctuation">:</span>  <span class="token key atrule">db-data</span><span class="token punctuation">:</span>    <span class="token comment"># external: true # 指定此卷是已存在的，docker不尝试自动创建，如果不存在则引发错误</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>服务中的配置项，可以在官网上查看</p></blockquote><img src="/2022/01/05/devops/docker-compose/0002.png" class="" title="示例"><h3 id="测试开源项目"><a href="#测试开源项目" class="headerlink" title="测试开源项目"></a>测试开源项目</h3><h4 id="WordPress"><a href="#WordPress" class="headerlink" title="WordPress"></a>WordPress</h4><blockquote><p>官网连接：<a href="https://docs.docker.com/samples/wordpress/">https://docs.docker.com/samples/wordpress/</a></p></blockquote><h5 id="创建项目文件夹"><a href="#创建项目文件夹" class="headerlink" title="创建项目文件夹"></a>创建项目文件夹</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@qing centos]$ cd /home/qing[root@qing centos]$ mkdir word_press[root@qing centos]$ cd word_press<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="编写docker-compose-yml"><a href="#编写docker-compose-yml" class="headerlink" title="编写docker-compose.yml"></a>编写docker-compose.yml</h5><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ vim docker<span class="token punctuation">-</span>compose.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># docker-compose.yml</span><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3.9"</span>    <span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">db</span><span class="token punctuation">:</span> <span class="token comment"># 数据库服务</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span><span class="token number">5.7</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> db_data<span class="token punctuation">:</span>/var/lib/mysql    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always <span class="token comment"># 重启规则 总是重启</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span> <span class="token comment"># 环境配置 key-value 数据库的账号密码等配置</span>      <span class="token key atrule">MYSQL_ROOT_PASSWORD</span><span class="token punctuation">:</span> somewordpress      <span class="token key atrule">MYSQL_DATABASE</span><span class="token punctuation">:</span> wordpress      <span class="token key atrule">MYSQL_USER</span><span class="token punctuation">:</span> wordpress      <span class="token key atrule">MYSQL_PASSWORD</span><span class="token punctuation">:</span> wordpress      <span class="token key atrule">wordpress</span><span class="token punctuation">:</span> <span class="token comment"># wordpress服务</span>    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span> <span class="token comment"># 依赖关系，基于db服务启动</span>      <span class="token punctuation">-</span> db    <span class="token key atrule">image</span><span class="token punctuation">:</span> wordpress<span class="token punctuation">:</span>latest <span class="token comment"># 镜像</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> wordpress_data<span class="token punctuation">:</span>/var/www/html    <span class="token key atrule">ports</span><span class="token punctuation">:</span> <span class="token comment"># 暴露端口 映射</span>      <span class="token punctuation">-</span> <span class="token string">"8000:80"</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always <span class="token comment"># 重启规则 总是重启</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span> <span class="token comment"># 环境配置 key-value 连接的数据库配置</span>      <span class="token key atrule">WORDPRESS_DB_HOST</span><span class="token punctuation">:</span> db      <span class="token key atrule">WORDPRESS_DB_USER</span><span class="token punctuation">:</span> wordpress      <span class="token key atrule">WORDPRESS_DB_PASSWORD</span><span class="token punctuation">:</span> wordpress      <span class="token key atrule">WORDPRESS_DB_NAME</span><span class="token punctuation">:</span> wordpress<span class="token key atrule">volumes</span><span class="token punctuation">:</span> <span class="token comment"># 挂载卷设置</span>  <span class="token key atrule">db_data</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token key atrule">wordpress_data</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="编写自定义的Dockerfile"><a href="#编写自定义的Dockerfile" class="headerlink" title="编写自定义的Dockerfile"></a>编写自定义的Dockerfile</h5><blockquote><p>根据需求可选</p></blockquote><h5 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@qing centos]$ docker-compose up -d # 后台运行<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后便可以访问自己的地址来查看</p><h3 id="简单实战"><a href="#简单实战" class="headerlink" title="简单实战"></a>简单实战</h3><ol><li><p>编写项目微服务</p><blockquote><p><a href="https://github.com/RobertSunq/data/blob/master/qing/blog/hexo/docker_compose/docker_compose_demo.zip" title="下载链接">demo</a></p></blockquote></li><li><p>dockerfile构建镜像</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">FROM java:8 # 基本环境COPY ./*.jar /app/app.jar # 从宿主机拷贝jar包CMD ["--server.port=12233"] # 设置端口号EXPOSE 12233 # 暴露端口号ENTRYPOINT ["java", "-Xmx500m", "-jar", "-Dspring.profiles.active=docker", "/app/app.jar"] # 启动jar包<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>docker-compose.yml编排项目</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3.8'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">qingdemo</span><span class="token punctuation">:</span>    <span class="token key atrule">build</span><span class="token punctuation">:</span> .<span class="token comment">#      dockerfile: Dockerfile # 指定使用的dockerfile文件 默认为当前目录下Dockerfile</span><span class="token comment">#      image: qingdemo # 指定镜像 查找不到将使用dockerfile编译镜像</span>    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> redis_a      <span class="token punctuation">-</span> db    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"12233:12233"</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">"redis"</span>  <span class="token key atrule">db</span><span class="token punctuation">:</span> <span class="token comment"># 数据库服务</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">"mysql:5.7"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> db_data<span class="token punctuation">:</span>/var/lib/mysql    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"3306:3306"</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always <span class="token comment"># 重启规则 总是重启</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span> <span class="token comment"># 环境配置 key-value 数据库的账号密码等配置</span>      <span class="token key atrule">MYSQL_ROOT_PASSWORD</span><span class="token punctuation">:</span> qing<span class="token important">&amp;123456</span>      <span class="token key atrule">MYSQL_DATABASE</span><span class="token punctuation">:</span> demo_dev      <span class="token key atrule">MYSQL_USER</span><span class="token punctuation">:</span> qing      <span class="token key atrule">MYSQL_PASSWORD</span><span class="token punctuation">:</span> qing<span class="token important">&amp;123456</span>      <span class="token key atrule">MYSQL_ROOT_HOST</span><span class="token punctuation">:</span> <span class="token string">'%'</span> <span class="token comment"># 所有ip均可链接当前数据库</span><span class="token comment"># 挂载卷配置</span><span class="token key atrule">volumes</span><span class="token punctuation">:</span>  <span class="token key atrule">db-data</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>放入到服务器</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@qing centos]$ pwd/home/qing/demo_app[root@qing centos]$ lsdemo.jar  docker-compose.yml  Dockerfile[root@qing centos]$ docker-compose up -d # 后台运行 以下为日志输出# Sending build context to Docker daemon  60.95MB# Step 1/5 : FROM java:8#  ---&gt; d23bdf5b1b1b# Step 2/5 : COPY ./*.jar /app/app.jar#  ---&gt; Using cache#  ---&gt; fb647c018662# Step 3/5 : CMD ["--server.port=12233"]#  ---&gt; Using cache#  ---&gt; 8599345e23f4# Step 4/5 : EXPOSE 12233#  ---&gt; Using cache#  ---&gt; 11fd92f27368# Step 5/5 : ENTRYPOINT ["java", "-Xmx500m", "-jar", "-Dspring.profiles.active=docker", "/app/app.jar"]#  ---&gt; Running in 3dd19ac03609#  ---&gt; e930ce4c5f6f# Successfully built e930ce4c5f6f# Successfully tagged demo_app_qingdemo:latest# Use 'docker scan' to run Snyk tests against images to find vulnerabilities and learn how to fix them# [+] Running 4/4#  ⠿ Network demo_app_default       Created                                                                                                   0.2s#  ⠿ Container demo_app-db-1        Started                                                                                                   1.0s#  ⠿ Container demo_app-redis-1     Started                                                                                                   0.9s#  ⠿ Container demo_app-qingdemo-1  Started                                                                                                   1.9s[root@qing centos]$ docker-compose logs -f # 查看启动日志 如果启动失败可以根据启动日志排查错误[root@qing centos]$ docker-compose down # 停止服务[root@qing centos]$ docker images # 查看镜像# 如果需要重新部署打包[root@qing centos]$ docker-compose up --build # 重新给构建<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><hr><p><strong>完</strong></p><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.bilibili.com/video/BV1og4y1q7M4?from=search&amp;seid=8833819761241839370">狂神说Docker</a> ：<a href="https://www.bilibili.com/video/BV1og4y1q7M4?share_source=copy_web">https://www.bilibili.com/video/BV1og4y1q7M4?share_source=copy_web</a></p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> command </tag>
            
            <tag> note </tag>
            
            <tag> docker-compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令备忘录</title>
      <link href="/2021/12/30/note/command-note/"/>
      <url>/2021/12/30/note/command-note/</url>
      
        <content type="html"><![CDATA[<blockquote><p>由书籍、博客、网络、同事传授等整理而来，部分会附带转载学习来源。</p><p>由于是逐渐补充型文章，所以排版、标题分类上可能比较乱以及随时变更，敬请见谅。</p></blockquote><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><hr><blockquote><p>该部分命令多数不针对发行版本区分，由于内核版本、linux版本不同而有所不同。</p><p>${}  —&gt; 表示变量替换</p></blockquote><h3 id="使用SSH建立远程连接"><a href="#使用SSH建立远程连接" class="headerlink" title="使用SSH建立远程连接"></a>使用SSH建立远程连接</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 最简连接方式[root@qing centos]$ ssh username@hostname # 然后输入密码username@hostname's password:# 指定端口连接, 不指定时默认端口为22[root@qing centos]$ ssh -p 2233 username@hostnameusername@hostname's password:# 如何查看与修改ssh配置# mac linux系统中 SSH的配置文件在/etc/ssh/sshd_config# win 待查[root@qing centos]$ cat /etc/ssh/sshd_config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="maven-surefire单元测试"><a href="#maven-surefire单元测试" class="headerlink" title="maven-surefire单元测试"></a>maven-surefire单元测试</h3><blockquote><p>部分命令对版本有所要求，请注意。</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 根据配置文件，运行范围内的所有单元测试[root@qing centos]$ mvn test# 指定某个包下面的所有用例# [root@qing centos]$ mvn test -Dtest=${包完整路径}.*# 最后的 .* 是通配符表示运行该包下所有用例[root@qing centos]$ mvn test -Dtest=cn.qing.demo.*# 指定某个测试用例类# [root@qing centos]$ mvn test -Dtest=${包完整路径}.${测试用例类名}[root@qing centos]$ mvn test -Dtest=cn.qing.demo.DemoTest# 指定运行多个测试用例类# [root@qing centos]$ mvn test -Dtest=${测试用例类名1},${测试用例类名2}[root@qing centos]$ mvn test -Dtest=cn.qing.demo.DemoTest1, cn.qing.demo.DemoTest2# 指定运行测试用例类中的一个方法# [root@qing centos]$ mvn test -Dtest=${类路径}#${方法名}[root@qing centos]$ mvn test -Dtest=cn.qing.demo.DemoTest#demoTest# 以上方法可使用 * 进行通配# mvn test -Dtest=cn.qing.demo.DemoTest#demo_*# 上面的命令意思为 运行DemoTest测试类中的以demo_为开头的方法。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="系统编码-x2F-语言"><a href="#系统编码-x2F-语言" class="headerlink" title="系统编码/语言"></a>系统编码/语言</h3><blockquote><p>windows的默认编码为GBK，Linux的默认编码为UTF-8</p><p>因为在windows下编辑的中文，在linux下会显示为乱码。</p></blockquote><h4 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@qing centos]$ localeLANG=zh_CN.UTF-8# 系统语言   zh_CN.UTF-8 ----&gt; 中文,编码为UTF-8LC_CTYPE="zh_CN.UTF-8"# 语言符号与分类LC_NUMERIC="zh_CN.UTF-8"# 数字LC_TIME="zh_CN.UTF-8"# 时间显示格式LC_COLLATE="zh_CN.UTF-8"# 比较和排序LC_MONETARY="zh_CN.UTF-8"# 货币的单位LC_MESSAGES="zh_CN.UTF-8"# 信息的提示,eg. 提示信息、错误信息、状态信息、标题等LC_PAPER="zh_CN.UTF-8"# 打印纸张设置LC_NAME="zh_CN.UTF-8"# 姓名书LC_ADDRESS="zh_CN.UTF-8"# 地址LC_TELEPHONE="zh_CN.UTF-8"# 电话号码LC_MEASUREMENT="zh_CN.UTF-8"  # 度量衡LC_IDENTIFICATION="zh_CN.UTF-8"# 对locale自身信息对描述LC_ALL=# 分类属性的优先级上为: LC_ALL &gt; LC_* &gt; LANG<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@qing centos]$ vim /etc/locale.conf # centos7[root@qing centos]$ vim /etc/sysconfig/i18n # centos6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="重新加载配置文件"><a href="#重新加载配置文件" class="headerlink" title="重新加载配置文件"></a>重新加载配置文件</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@qing centos]$ source /etc/locale.conf # centos7[root@qing centos]$ source /etc/sysconfig/i18n # centos7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h3><h4 id="常规使用"><a href="#常规使用" class="headerlink" title="常规使用"></a>常规使用</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># [root@qing centos]$ cp [option] ${source_file_path} ${target_file_path}[root@qing centos]$ cp /tmp/qing/source.log /tmp/qing/source.log-a archive 复制所有的目录# -d 源文件为连接文件时，则复制连接文件属性而非文件本身# -f 强制复制，如果遇到重复或者其他疑问，不会进行询问而强制复制# -i 若目标文件已存在，在覆盖时先询问是否真的操作# -I 建立硬连接的连接文件，而非复制文件本身# -p 与文件的属性一起复制，而非使用默认属性# -r 递归复制，用于目录的复制操作# -s 复制成符号连接文件，“快捷方式”# -u 若目标文件必源文件旧，则更新目标文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="强制复制"><a href="#强制复制" class="headerlink" title="强制复制"></a>强制复制</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 复制时，如果遇到重复或者其他疑问，不会进行询问而强制复制[root@qing centos]$ cp -f /tmp/qing/source.log /tmp/qing/source.log# 上述命令如果还是会询问，则可能是cp命令属于 其他命令组合的别名# 使用alias 查看[root@qing centos]$ aliasalias cp='cp -i'# 此配置即为还会进行提示# -f的替换方案## 使用命令 \cp    反斜杠来强制复制[root@qing centos]$ \cp /tmp/qing/source.log /tmp/qing/source.log## 修改别名  ### todo 待查证[root@qing centos]$ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>loading…</p><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><hr><h3 id="cmd"><a href="#cmd" class="headerlink" title="cmd"></a>cmd</h3><p>loading…</p><h3 id="PowerShell"><a href="#PowerShell" class="headerlink" title="PowerShell"></a>PowerShell</h3><h4 id="转至管理员模式"><a href="#转至管理员模式" class="headerlink" title="转至管理员模式"></a>转至管理员模式</h4><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 在powershell中输入，会打开一个新的管理员模式的窗口</span><span class="token function">PS</span> G:\&gt; <span class="token function">Start-Process</span> powershell <span class="token operator">-</span>Verb runAs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="MacOs"><a href="#MacOs" class="headerlink" title="MacOs"></a>MacOs</h2><hr><h3 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h3><p>loading…</p><hr><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><h4 id="not-module的小总结"><a href="#not-module的小总结" class="headerlink" title="not module的小总结"></a>not module的小总结</h4><ol><li><p>环境中存在多个python与其对应的pip，按照的时候指定错误安装到其他版本的lib里面去了。eg. 使用pip2按照依赖到python2，但是需要在python3中使用。</p> <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@qing centos]$ /opt/local/qing/python/lib/python -m pip list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>依赖所在的site地址，没有被加载到python的path。</p></li><li><p>安装的依赖，没有被加载到对应python的modules中</p></li></ol>   <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 进入到python命令界面查看 $ /opt/local/qing/python/lib/python</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">help</span><span class="token punctuation">(</span><span class="token string">'modules'</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="4"><li>没有安装这个依赖</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 进入到python命令界面查看 $ /opt/local/qing/python/lib/python</span><span class="token comment"># 查看python的lib路径</span><span class="token comment">## 引入依赖</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> site<span class="token comment">## 查看用户site-packages路径</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> site<span class="token punctuation">.</span>getusersitepackages<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'/home/robert/.local/lib/python2.7/site-packages'</span><span class="token comment">## 查看全局site-packages路径</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> site<span class="token punctuation">.</span>getsitepackages<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'/usr/lib64/python2.7/site-packages'</span><span class="token punctuation">,</span> <span class="token string">'/usr/lib/python2.7/site-packages'</span><span class="token punctuation">,</span> <span class="token string">'/usr/lib/site-python'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> command </tag>
            
            <tag> note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker教程基础版</title>
      <link href="/2021/12/25/devops/docker-notes/"/>
      <url>/2021/12/25/devops/docker-notes/</url>
      
        <content type="html"><![CDATA[<h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><ul><li>Docker概述</li><li>Docker安装</li><li>Docker命令<ul><li>镜像命令</li><li>容器命令</li><li>操作命令</li><li>….</li></ul></li><li>Docker镜像</li><li>容器数据卷</li><li>DockerFile</li><li>Docker网络原理</li><li>IDEA整合Docker</li></ul><blockquote><p>Docker Compose、Docker Swarm （简化版K8s）、CI/CD Jenkins进阶版</p></blockquote><h2 id="Docker概述"><a href="#Docker概述" class="headerlink" title="Docker概述"></a>Docker概述</h2><h3 id="痛点"><a href="#痛点" class="headerlink" title="痛点"></a>痛点</h3><p>开发、测试、预生产、生产环境搭建的成本和一致性问题。在进行集群拓展的时候，每个机器上都要进行环境的部署安装（Reids ES Hadoop……）等费时费力，而且还可能因为机器的不同而产生各种各样的不一致问题。</p><p>针对java开发来说，一般通过jar/war包来部署的，但是运行jar包所需要的其他环境依赖，比如：JDK、Tomcat、Mysql、Redis这些都需要在机器上事先的安装配置完成。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>可以通过发包的时候直接带上软件运行所需要的环境和对环境的配置进行打包 “jar+”（app + jdk + mysql + redis + es），这样可以保证 开发 → 打包 → 部署 → 上线 所具有的环境保持一致，同时也可以避免在对新机器进行部署的时候，还需要进行复杂的环境配置。</p><p>Docker 便是这么一个类似的过程：打包项目带上环境（镜像） → 发布（Docker仓库）→ 下载发布的镜像 → 直接运行（容器）。</p><h4 id="虚拟机技术"><a href="#虚拟机技术" class="headerlink" title="虚拟机技术"></a>虚拟机技术</h4><p>虚拟化技术。可以直接通过虚拟机镜像文件，直接虚拟出一个具有完整环境的虚拟电脑，在其上面在运行所需要的App。</p><p><strong>缺点：</strong></p><p>对物理服务器资源的消耗，在物理服务器创建一台虚拟机时，便需要虚拟出一套硬件并在上面运行完整的操作系统，每台虚拟机都占用许多的服务器资源。是在<strong>物理层面上的隔离</strong>，启动慢 占用内存大，分钟级启动。当需要启动多个虚拟机时需要花费很大的时间</p><p><strong>物理资源层面上的隔离</strong></p><img src="/2021/12/25/devops/docker-notes/0012.png" class="" title="虚拟机结构示意图"><h4 id="Docker容器化技术"><a href="#Docker容器化技术" class="headerlink" title="Docker容器化技术"></a>Docker容器化技术</h4><p>也是一种虚拟化技术。镜像：包含所需要的最基础环境（最核心的Linux环境4M + 其他环境），没有其他额外的文件，只集成需要的便可以做到很小巧，启动运行镜像也十分快速，秒级别启动。</p><p><strong>优点：</strong></p><ul><li><p>传统虚拟机，虚拟出硬件，运行一个完整的操作系统，然后再这个系统上安装和运行软件，Docker并不是选择去模拟一个完整的操作系统</p></li><li><p>容器内的应用直接运行在宿主机的内核，容器时没有自己的内核的，并不去虚拟硬件所以十分的轻便</p></li><li><p>每个容器是相互隔离，每个容器都有一套自己的文件系统，互相不影响</p></li><li><p>更快速的交付和部署</p><ul><li>打包镜像发布测试 一键运行</li></ul></li><li><p>更便捷的升级和扩缩容</p><ul><li>在不同的机器上直接运行相同的镜像来扩容</li></ul></li><li><p>更简单的系统运维</p><ul><li>开发测试生产环境高度一致</li></ul></li><li><p>更高效的计算机资源利用</p></li></ul><p><strong>缺点：</strong></p><p>由于是<strong>操作系统进程层面上的隔离</strong>不是绝对的物理隔离，所以在安全性上时低于虚拟机的。</p><p><strong>操作系统进程层面上的隔离</strong></p><img src="/2021/12/25/devops/docker-notes/0013.png" class="" title="docker多容器结构"><h4 id="基本组成"><a href="#基本组成" class="headerlink" title="基本组成"></a>基本组成</h4><p>C/S模式：docker-client，docker-service</p><img src="/2021/12/25/devops/docker-notes/0000.png" class="" title="基本组成"><p>Docker daemon（守护进程）：Docker Client通过命令行与Docker Damon通信，完成Docker相关操作</p><p>Images（镜像）：类似于软件安装包</p><p>Containers（容器）：软件的运行</p><p><strong>镜像（image）：</strong></p><p>在docker中，镜像就类似于一个模板，可以通过这个模板来创建容器服务，同时也可以通过这个镜像去创建多个容器（最终服务运行或者项目运行就是在容器中）。</p><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">graph</span> TDA<span class="token text string">[tomcat镜像]</span> <span class="token arrow operator">--&gt;</span> B<span class="token text string">[run]</span>B <span class="token arrow operator">--&gt;</span> C<span class="token text string">[tomcat 1容器&lt;提供服务器&gt;]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>容器（container）：</strong></p><p>Docker利用容器技术，独立运行一个或者一组应用，通过镜像来创建。</p><p>启动、停止、删除等基本命令！</p><p><strong>仓库（repository）：</strong></p><p>即存放镜像的地方，仓库分为私用仓库与公有仓库。但Docker Hub默认为国外服务器，所有可以通过配置为阿里云下镜像仓库来加速下载公用镜像。</p><h3 id="底层原理概述"><a href="#底层原理概述" class="headerlink" title="底层原理概述"></a>底层原理概述</h3><h4 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h4><ul><li>镜像<ul><li>将所有需要的内容放到不同的镜像（集装箱）中，需要哪些环境就直接拿哪个镜像（集装箱）就可以</li></ul></li><li>标准化<ul><li>镜像管理标准化，所有的镜像都放置于仓库中统一管理，当需要某些环境需要哪些镜像就使用docker去仓库中获取。</li><li>命令标准化，Docker提供了一系列的命令，来帮助我们对镜像进行一系列的操作</li></ul></li><li>隔离性<ul><li>运行镜像中的内容（容器）时，会在Linux的内核中单独开辟一片空间，这片空间不会影响到其他程序</li></ul></li></ul><h4 id="基本工作原理概述"><a href="#基本工作原理概述" class="headerlink" title="基本工作原理概述"></a>基本工作原理概述</h4><ol><li><p>Docker 是一个Client - Server结构的系统，Docker的守护进程运行在主机上。通过Socket从客户端访问！</p></li><li><p>DockerServer接收到Docker-Client的指令，就会执行这个命令！</p></li><li><p>容器内部的端口号是私有独立的，如果外部的想要访问，就需要通过linux服务器的端口号进行端口映射。</p></li></ol><img src="/2021/12/25/devops/docker-notes/0002.png" class="" title="工作原理"><p>Docker 为什么比VM快</p><ol><li><p>docker更少的抽象层</p></li><li><p>docker利用的是宿主机的内核，vm需要的是Guest OS</p></li></ol><img src="/2021/12/25/devops/docker-notes/0003.png" class="" title="对比图1"><p>所以新建一个容器的时候，docker 不需要像虚拟机一样重新加载操作系统内核，避免引导。虚拟机时加载Guest OS，分钟级别的，而docker时利用宿主机的操作系统，省略了这个复杂的过程，秒级。</p><img src="/2021/12/25/devops/docker-notes/0004.png" class="" title="对比图2"><h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><h4 id="环境查看"><a href="#环境查看" class="headerlink" title="环境查看"></a>环境查看</h4><p>已在centos7上进行安装为例</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 查看系统内核版本</span><span class="token punctuation">[</span>root@centos7 ~<span class="token punctuation">]</span>$ <span class="token function">uname</span> -r<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 查看系统版本</span><span class="token punctuation">[</span>root@centos7 ~<span class="token punctuation">]</span>$ <span class="token function">cat</span> /etc/os-release<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h4><p><a href="https://docs.docker.com/engine/install/" title="install">官方手册</a> <a href="https://docs.docker.com/engine/install/">https://docs.docker.com/engine/install/</a></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 1、卸载历史版本的docker</span><span class="token punctuation">[</span>root@centos7 ~<span class="token punctuation">]</span>$ yum remove docker <span class="token punctuation">\</span>                  docker-client <span class="token punctuation">\</span>                  docker-client-latest <span class="token punctuation">\</span>                  docker-common <span class="token punctuation">\</span>                  docker-latest <span class="token punctuation">\</span>                  docker-latest-logrotate <span class="token punctuation">\</span>                  docker-logrotate <span class="token punctuation">\</span>                  docker-engine                  <span class="token comment"># 2、安装基础安装包</span><span class="token punctuation">[</span>root@centos7<span class="token punctuation">]</span>$ yum <span class="token function">install</span> -y yum-utils <span class="token comment"># 3、设置镜像仓库</span><span class="token comment"># yum-config-manager \</span><span class="token comment">#    --add-repo \</span><span class="token comment">#     https://download.docker.com/linux/centos/docker-ce.repo # 默认是国外仓库</span>    <span class="token punctuation">[</span>root@centos7 ~<span class="token punctuation">]</span>$ yum-config-manager <span class="token punctuation">\</span>    --add-repo <span class="token punctuation">\</span>    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo <span class="token comment"># 阿里云的镜像地址</span>    <span class="token comment"># 4、更新yum</span><span class="token punctuation">[</span>root@centos7 ~<span class="token punctuation">]</span>$ yum makecache fast<span class="token comment"># 5、安装 ce--社区，ee--企业  核心、客户端、容器</span><span class="token punctuation">[</span>root@centos7 ~<span class="token punctuation">]</span>$ yum <span class="token function">install</span> docker-ce docker-ce-cli containerd.io<span class="token comment"># 指定版本 yum install docker-ce--&lt;VERSION_STRING&gt; docker-ce-cli--&lt;VERSION_STRING&gt; containerd.io</span><span class="token comment"># 查看其他版本</span><span class="token comment"># [root@centos7 ~]$ yum list docker-ce --showduplicates | sort -r</span><span class="token comment"># 6、启动</span><span class="token punctuation">[</span>root@centos7 ~<span class="token punctuation">]</span>$ systemctl start docker<span class="token comment"># 7、验证docker是否启动成功</span><span class="token punctuation">[</span>root@centos7 ~<span class="token punctuation">]</span>$ docker version<span class="token punctuation">[</span>root@centos7 ~<span class="token punctuation">]</span>$ docker run hello-world<span class="token comment"># 8、查看下载的镜像</span><span class="token punctuation">[</span>root@centos7 ~<span class="token punctuation">]</span>$ docker imagesREPOSITORY    TAG       IMAGE ID       CREATED        SIZEhello-world   latest    d1165f221234   <span class="token number">4</span> months ago   <span class="token number">13</span>.3kB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/12/25/devops/docker-notes/0001.png" class="" title="输出"><h4 id="快速卸载"><a href="#快速卸载" class="headerlink" title="快速卸载"></a>快速卸载</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 1、卸载依赖 </span><span class="token punctuation">[</span>root@centos7 ~<span class="token punctuation">]</span>$ yum remove docker-ce docker-ce-cli containerd.io<span class="token comment"># 2、删除资源</span><span class="token punctuation">[</span>root@centos7 ~<span class="token punctuation">]</span>$ <span class="token function">rm</span> -rf /var/lib/docker<span class="token punctuation">[</span>root@centos7 ~<span class="token punctuation">]</span>$ <span class="token function">rm</span> -rf /var/lib/containerd<span class="token comment"># /var/lib/docker docker的默认工作路径</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="镜像加速"><a href="#镜像加速" class="headerlink" title="镜像加速"></a>镜像加速</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 以阿里云为列</span><span class="token punctuation">[</span>root@centos7 ~<span class="token punctuation">]</span>$ <span class="token function">mkdir</span> -p /etc/docker <span class="token comment"># 创建文件</span><span class="token comment"># 编写配置文件 下面的地址需要换成阿里云中自己实例中创建的</span><span class="token punctuation">[</span>root@centos7 ~<span class="token punctuation">]</span>$ <span class="token function">tee</span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;-</span><span class="token string">'EOF'{"registry-mirrors":["https://qiyb9988.mirror.aliyuncs.com"]}EOF</span><span class="token punctuation">[</span>root@centos7 ~<span class="token punctuation">]</span>$ systemctl daemon-reload <span class="token comment"># 编译配置文件</span><span class="token punctuation">[</span>root@centos7 ~<span class="token punctuation">]</span>$ systemctl restart docker <span class="token comment"># 重启docker</span><span class="token punctuation">[</span>root@centos7 ~<span class="token punctuation">]</span>$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Docker常用命令"><a href="#Docker常用命令" class="headerlink" title="Docker常用命令"></a>Docker常用命令</h2><h4 id="基本帮助"><a href="#基本帮助" class="headerlink" title="基本帮助"></a>基本帮助</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@centos7 ~<span class="token punctuation">]</span>$ <span class="token comment">## 帮助文档 https://docs.docker.com/reference/</span><span class="token punctuation">[</span>root@centos7 ~<span class="token punctuation">]</span>$ docker version <span class="token comment">#  显示docker版本信息</span><span class="token punctuation">[</span>root@centos7 ~<span class="token punctuation">]</span>$ docker info <span class="token comment"># 显示docker的系统信息，包括镜像和容器的数量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h4><p><a href="https://docs.docker.com/reference/" title="reference">官方命令说明</a>  <a href="https://docs.docker.com/reference/">https://docs.docker.com/reference/</a></p><p><a href="https://hub.docker.com/" title="dockerHub">官方仓库</a>    <a href="https://hub.docker.com/">https://hub.docker.com/</a></p><p><strong>查看与搜索镜像</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ docker images REPOSITORY    TAG       IMAGE ID       CREATED        SIZEhello-world   latest    d1165f221234   <span class="token number">4</span> months ago   <span class="token number">13</span>.3kB<span class="token comment">#################################</span><span class="token comment"># REPOSITORY镜像的仓库源</span><span class="token comment"># TAG镜像的标签</span><span class="token comment"># IMAGE ID镜像的ID</span><span class="token comment"># CREATED镜像的创建时间</span><span class="token comment"># SIZE镜像的大小</span><span class="token comment"># 可选项</span><span class="token comment">#--all , -a查看所有镜像</span><span class="token comment">#--quiet , -q只显示镜像ID</span><span class="token comment">#################################</span><span class="token comment">########################################################################</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ docker search mysql  <span class="token comment"># 搜索镜像</span>NAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATEDmysql                             MySQL is a widely used, open-source relation…   <span class="token number">11099</span>     <span class="token punctuation">[</span>OK<span class="token punctuation">]</span>       mariadb                           MariaDB Server is a high performing <span class="token function">open</span> sou…   <span class="token number">4209</span>      <span class="token punctuation">[</span>OK<span class="token punctuation">]</span>       <span class="token comment"># 可选项，通过搜索来过滤</span>--filter<span class="token operator">=</span>STARS<span class="token operator">=</span><span class="token number">3000</span> <span class="token comment"># 搜索出来的镜像是STARS大于3000的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>下载镜像</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ docker pull mysql  <span class="token comment"># 下载镜像</span>Using default tag: latest  <span class="token comment"># 不声明tag，默认时 latest</span>latest: Pulling from library/mysqlb4d181a07f80: Download complete  <span class="token comment"># 分层下载，docker image的核心 联合文件系统？</span>a462b60610f5: Download complete 578fafb77ab8: Download complete <span class="token number">524046006037</span>: Download complete d0cbe54c8855: Download complete aa18e05cc46d: Download complete 32ca814c833f: Download complete 9ecc8abdb7f5: Download complete ad042b682e0f: Download complete 71d327c6bb78: Download complete 165d1d10a3fa: Download complete 2f40c47d0626: Download complete Digest: sha256:52b8406e4c32b8cf0557f1b74517e14c5393aff5cf0384eff62d9e81f4985d4b <span class="token comment">#签名</span>Status: Downloaded newer image <span class="token keyword">for</span> mysql:latestdocker.io/library/mysql:latest<span class="token comment"># 真实地址</span><span class="token comment">######## 等价于</span><span class="token comment"># docker pull musql</span><span class="token comment"># docker pull docker.io/library/mysql:latest</span><span class="token comment">################################</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ docker pull mysql:5.7  <span class="token comment"># 指定版本</span><span class="token number">5.7</span>: Pulling from library/mysqlb4d181a07f80: Already exists <span class="token comment"># 共用分层文件，节省空间和下载速度，不用重复下载</span>a462b60610f5: Already exists 578fafb77ab8: Already exists <span class="token number">524046006037</span>: Already exists d0cbe54c8855: Already exists aa18e05cc46d: Already exists 32ca814c833f: Already exists 52645b4af634: Pull complete bca6a5b14385: Pull complete 309f36297c75: Pull complete 7d75cacde0f8: Pull complete Digest: sha256:1a2f9cd257e75cc80e9118b303d1648366bc2049101449bf2c8d82b022ea86b7Status: Downloaded newer image <span class="token keyword">for</span> mysql:5.7docker.io/library/mysql:5.7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>删除镜像</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 删除镜像 rmi -&gt; remove image</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ docker rmi -f <span class="token punctuation">[</span>image id<span class="token punctuation">]</span>  <span class="token comment"># 删除指定镜像</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ docker rmi -f <span class="token variable"><span class="token variable">$(</span>docker images -aq<span class="token variable">)</span></span>  <span class="token comment"># 删除所有，${} 传递参数，查出所有的image id</span><span class="token comment"># [root@qing centos]$ docker rmi -f (mysql5.7) 会发现只删除了mysql5.7不同的文件，和mysql8公用的部分并没有删除 </span><span class="token comment"># 待确定？注意这里删除的是镜像，运行过的镜像创建的容器并没有被删除 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h4><blockquote><p>通过镜像来创建容器</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 以下载并启动 centos镜像为列子</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ docker pull centos<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>新建容器并启动</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ docker run <span class="token punctuation">[</span>可选参数<span class="token punctuation">]</span> image<span class="token comment">###################################################</span><span class="token comment"># --name="name"容器名字 tomcat01 tomcat02，用来区分容器</span><span class="token comment"># -d后台方式运行 ja nohup</span><span class="token comment"># -it使用交互方式运行，进入容器查看内容</span><span class="token comment"># -t交互式操作</span><span class="token comment"># -i终端</span><span class="token comment"># -p指定容器的端口 -p 8080:8080</span><span class="token comment"># -p 主机端口：容器端口  (常用)</span><span class="token comment"># -p ip:主机端口:容器端口</span><span class="token comment"># -p 容器端口</span><span class="token comment"># 容器端口</span><span class="token comment"># -P随机指定端口</span><span class="token comment">###################################################</span><span class="token comment"># 启动并进入容器</span><span class="token punctuation">[</span>root@qing centos<span class="token punctuation">]</span>$ docker run -it centos /bin/bash<span class="token comment"># 放在镜像名后的是命令，打开一个交互式 Shell，因此用的是 /bin/bash。</span><span class="token punctuation">[</span>root@75dcc58b2b3d /<span class="token punctuation">]</span>$ <span class="token function">ls</span><span class="token comment"># 此时主机已经指向启动的容器，此时centos为基础版本。</span>bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var<span class="token punctuation">[</span>root@75dcc58b2b3d /<span class="token punctuation">]</span>$ <span class="token builtin class-name">exit</span><span class="token comment"># 从容器中退出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/12/25/devops/docker-notes/0014.png" class="" title="运行流程"><p><strong>查看所有运行的容器</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker <span class="token function">ps</span><span class="token comment"># 查看运行中的容器</span><span class="token comment">###################################################</span><span class="token comment">#列出当前正在运行的容器</span><span class="token comment"># -a列出当前正在运行的容器+历史运行过的容器</span><span class="token comment"># -n=?显示最近创建的容器个数</span><span class="token comment"># -q只显示容器的编号</span><span class="token comment">###################################################</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker <span class="token function">ps</span> -a<span class="token comment"># 查看所有运行过的容器</span>CONTAINER ID   IMAGE         COMMAND       CREATED         STATUS                       PORTS     NAMES3c8ef01a7eb6   centos        <span class="token string">"/bin/bash"</span>   <span class="token number">6</span> minutes ago   Exited <span class="token punctuation">(</span><span class="token number">130</span><span class="token punctuation">)</span> <span class="token number">5</span> minutes ago             nice_austinceafc51e6972   hello-world   <span class="token string">"/hello"</span>      <span class="token number">2</span> days ago      Exited <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token number">2</span> days ago                  focused_burnell<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>退出容器</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># exit 停止当前容器并退出</span><span class="token comment"># Ctrl + P + Q 仅退出当前容器，不停止运行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>删除容器</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker <span class="token function">rm</span> 容器id<span class="token comment"># 删除指定容器，不能删除正在运行的容器 rm -f 强制删除</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker <span class="token function">rm</span> -f <span class="token variable"><span class="token variable">$(</span>docker <span class="token function">ps</span> -aq<span class="token variable">)</span></span><span class="token comment"># 删除所有容器</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker <span class="token function">ps</span> -a -q<span class="token operator">|</span><span class="token function">xargs</span> docker <span class="token function">rm</span><span class="token comment"># 删除所有的容器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>启动和停止容器</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker start 容器id<span class="token comment"># 启动容器</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker restart 容器id<span class="token comment"># 重启容器</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker stop 容器id<span class="token comment"># 停止当前正在运行的容器</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker <span class="token function">kill</span> 容器id<span class="token comment"># 强制停止容器</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker start 容器id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><p><strong>后台启动</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 命令 docker run -d 镜像名！</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker run -d centos<span class="token comment"># 后台启动</span><span class="token comment"># 输入docker ps ， 发现centos停止了</span><span class="token comment"># 常见的坑：</span><span class="token comment"># docker容器使用后台运行，就必须要有一个前台的进程，docker发现没有应用，就会自动停止</span><span class="token comment"># nginx，容器启动后，发现自己没有提供服务，就会立刻停止，就没有程序了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>查看日志</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker logs --help<span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker logs-tf --tail <span class="token number">10</span> 容器id<span class="token comment"># -f 保留打印窗口，-t 添加时间戳 --tail 10 最后10行</span><span class="token comment"># 自定义shell脚本</span><span class="token comment"># "while true;do echo qing;sleep 1; done"</span><span class="token comment"># [root@qing /]$ docker run -d centos /bin/sh -c "while true;do echo qing;sleep 1;done"</span><span class="token comment"># -c 执行命令</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker <span class="token function">top</span> 容器id<span class="token comment"># 查看容器内进程信息</span><span class="token environment constant">UID</span>                 PID                 <span class="token environment constant">PPID</span>                C                   STIME               TTY                 TIME                CMDroot                <span class="token number">32718</span>               <span class="token number">32697</span>               <span class="token number">33</span>                  <span class="token number">23</span>:07               ?                   00:00:23            /bin/sh -c <span class="token keyword">while</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token builtin class-name">echo</span> qing<span class="token punctuation">;</span>sheep <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>查看容器元数据</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker inspect 容器id<span class="token comment"># 查看容器信息</span><span class="token comment"># "Id" 比通过ps查询到的要长，ps中只是对其进行了部分截取</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><details>  <summary>      <mark>          <font color="green">详细输出</font>      </mark>    </summary>  <p>[root@qing /]$ docker inspect ${container id}</p>  <pre>  <code>  [    {        "Id": "2d2c8f54b427a6bfe6add93ab155be8879bbe54e0a7f5de66f5f3a79810ac0a4",        "Created": "2021-12-28T15:07:57.17357075Z",        "Path": "/bin/sh",        "Args": [            "-c",            "while true;do echo qing;sheep 1;done"        ],        "State": {            "Status": "running",            "Running": true,            "Paused": false,            "Restarting": false,            "OOMKilled": false,            "Dead": false,            "Pid": 32718,            "ExitCode": 0,            "Error": "",            "StartedAt": "2021-12-28T15:07:57.691697573Z",            "FinishedAt": "0001-01-01T00:00:00Z"        },        "Image": "sha256:5d0da3dc976460b72c77d94c8a1ad043720b0416bfc16c52c45d4847e53fadb6",        "ResolvConfPath": "/var/lib/docker/containers/2d2c8f54b427a6bfe6add93ab155be8879bbe54e0a7f5de66f5f3a79810ac0a4/resolv.conf",        "HostnamePath": "/var/lib/docker/containers/2d2c8f54b427a6bfe6add93ab155be8879bbe54e0a7f5de66f5f3a79810ac0a4/hostname",        "HostsPath": "/var/lib/docker/containers/2d2c8f54b427a6bfe6add93ab155be8879bbe54e0a7f5de66f5f3a79810ac0a4/hosts",        "LogPath": "/var/lib/docker/containers/2d2c8f54b427a6bfe6add93ab155be8879bbe54e0a7f5de66f5f3a79810ac0a4/2d2c8f54b427a6bfe6add93ab155be8879bbe54e0a7f5de66f5f3a79810ac0a4-json.log",        "Name": "/jovial_davinci",        "RestartCount": 0,        "Driver": "overlay2",        "Platform": "linux",        "MountLabel": "",        "ProcessLabel": "",        "AppArmorProfile": "",        "ExecIDs": null,        "HostConfig": {            "Binds": null,            "ContainerIDFile": "",            "LogConfig": {                "Type": "json-file",                "Config": {}            },            "NetworkMode": "default",            "PortBindings": {},            "RestartPolicy": {                "Name": "no",                "MaximumRetryCount": 0            },            "AutoRemove": false,            "VolumeDriver": "",            "VolumesFrom": null,            "CapAdd": null,            "CapDrop": null,            "CgroupnsMode": "host",            "Dns": [],            "DnsOptions": [],            "DnsSearch": [],            "ExtraHosts": null,            "GroupAdd": null,            "IpcMode": "private",            "Cgroup": "",            "Links": null,            "OomScoreAdj": 0,            "PidMode": "",            "Privileged": false,            "PublishAllPorts": false,            "ReadonlyRootfs": false,            "SecurityOpt": null,            "UTSMode": "",            "UsernsMode": "",            "ShmSize": 67108864,            "Runtime": "runc",            "ConsoleSize": [                0,                0            ],            "Isolation": "",            "CpuShares": 0,            "Memory": 0,            "NanoCpus": 0,            "CgroupParent": "",            "BlkioWeight": 0,            "BlkioWeightDevice": [],            "BlkioDeviceReadBps": null,            "BlkioDeviceWriteBps": null,            "BlkioDeviceReadIOps": null,            "BlkioDeviceWriteIOps": null,            "CpuPeriod": 0,            "CpuQuota": 0,            "CpuRealtimePeriod": 0,            "CpuRealtimeRuntime": 0,            "CpusetCpus": "",            "CpusetMems": "",            "Devices": [],            "DeviceCgroupRules": null,            "DeviceRequests": null,            "KernelMemory": 0,            "KernelMemoryTCP": 0,            "MemoryReservation": 0,            "MemorySwap": 0,            "MemorySwappiness": null,            "OomKillDisable": false,            "PidsLimit": null,            "Ulimits": null,            "CpuCount": 0,            "CpuPercent": 0,            "IOMaximumIOps": 0,            "IOMaximumBandwidth": 0,            "MaskedPaths": [                "/proc/asound",                "/proc/acpi",                "/proc/kcore",                "/proc/keys",                "/proc/latency_stats",                "/proc/timer_list",                "/proc/timer_stats",                "/proc/sched_debug",                "/proc/scsi",                "/sys/firmware"            ],            "ReadonlyPaths": [                "/proc/bus",                "/proc/fs",                "/proc/irq",                "/proc/sys",                "/proc/sysrq-trigger"            ]        },        "GraphDriver": {            "Data": {                "LowerDir": "/var/lib/docker/overlay2/5070e57b3b1ab1533ba4b1a8cb7de79e3655f6d78ba43c4640c2d25cedb00fa5-init/diff:/var/lib/docker/overlay2/0e6d8ab67489cffea7560a7fdc382658d599dc415839d4bf5f4d6c2b71dadf79/diff",                "MergedDir": "/var/lib/docker/overlay2/5070e57b3b1ab1533ba4b1a8cb7de79e3655f6d78ba43c4640c2d25cedb00fa5/merged",                "UpperDir": "/var/lib/docker/overlay2/5070e57b3b1ab1533ba4b1a8cb7de79e3655f6d78ba43c4640c2d25cedb00fa5/diff",                "WorkDir": "/var/lib/docker/overlay2/5070e57b3b1ab1533ba4b1a8cb7de79e3655f6d78ba43c4640c2d25cedb00fa5/work"            },            "Name": "overlay2"        },        "Mounts": [],        "Config": {            "Hostname": "2d2c8f54b427",            "Domainname": "",            "User": "",            "AttachStdin": false,            "AttachStdout": false,            "AttachStderr": false,            "Tty": false,            "OpenStdin": false,            "StdinOnce": false,            "Env": [                "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"            ],            "Cmd": [                "/bin/sh",                "-c",                "while true;do echo qing;sheep 1;done"            ],            "Image": "centos",            "Volumes": null,            "WorkingDir": "",            "Entrypoint": null,            "OnBuild": null,            "Labels": {                "org.label-schema.build-date": "20210915",                "org.label-schema.license": "GPLv2",                "org.label-schema.name": "CentOS Base Image",                "org.label-schema.schema-version": "1.0",                "org.label-schema.vendor": "CentOS"            }        },        "NetworkSettings": {            "Bridge": "",            "SandboxID": "6ef9320864e6daa4195b284e3c60fb56edb95be77010eda7cff755ab315cffeb",            "HairpinMode": false,            "LinkLocalIPv6Address": "",            "LinkLocalIPv6PrefixLen": 0,            "Ports": {},            "SandboxKey": "/var/run/docker/netns/6ef9320864e6",            "SecondaryIPAddresses": null,            "SecondaryIPv6Addresses": null,            "EndpointID": "3d08880669d8a5f2ad913bef248471a0377eeeb7793f83450cd514d0b43e7a39",            "Gateway": "172.18.0.1",            "GlobalIPv6Address": "",            "GlobalIPv6PrefixLen": 0,            "IPAddress": "172.18.0.2",            "IPPrefixLen": 16,            "IPv6Gateway": "",            "MacAddress": "02:42:ac:12:00:02",            "Networks": {                "bridge": {                    "IPAMConfig": null,                    "Links": null,                    "Aliases": null,                    "NetworkID": "73abca2ea3673a8f7f4919d8141708a47bc0851025083aefa25a3bec6286704d",                    "EndpointID": "3d08880669d8a5f2ad913bef248471a0377eeeb7793f83450cd514d0b43e7a39",                    "Gateway": "172.18.0.1",                    "IPAddress": "172.18.0.2",                    "IPPrefixLen": 16,                    "IPv6Gateway": "",                    "GlobalIPv6Address": "",                    "GlobalIPv6PrefixLen": 0,                    "MacAddress": "02:42:ac:12:00:02",                    "DriverOpts": null                }            }        }    }]  </code>  </pre></details><p><strong>进入当前正在运行的容器</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 通常容器都是使用后台方式运行的，需要进入容器修改一些配置</span><span class="token comment"># -it  通过交互模式运行</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker <span class="token builtin class-name">exec</span> -it 容器id /bin/bash  <span class="token comment"># 进入后台运行的容器，/bin/bash 位置开启一个新的终端，可以进行一些操作(常用)</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker attach 容器id<span class="token comment">#  进入正在执行的容器进入正在运行的中断，不会启动新的进程</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>从容器内拷贝文件到宿主机</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker <span class="token function">cp</span> 容器id:容器内路径目的主机路径<span class="token comment"># 容器内文件拷贝到主机</span><span class="token comment"># test 进入之前启动的centos容器内</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker <span class="token function">ps</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker attach <span class="token variable">${id}</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ <span class="token function">ls</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ <span class="token builtin class-name">cd</span> /home<span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ <span class="token function">touch</span> test.java<span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ <span class="token builtin class-name">exit</span> <span class="token comment"># 注意 此处是退出了容器，容器停止运行，但是在没有被清理时容器的数据依旧存在</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker <span class="token function">ps</span> -a<span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker <span class="token function">cp</span> <span class="token variable">${id}</span>:/home/test.java /home <span class="token comment"># 类似与socp命令</span><span class="token comment">## 拷贝时一个手动的过程，后期使用中可以通过 -v 卷的方式，实现自动同步，将容器中的目录与宿主机的进行同步</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>其他</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker --help<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/2021/12/25/devops/docker-notes/0005.png" class="" title="命令简图"><h4 id="命令小结"><a href="#命令小结" class="headerlink" title="命令小结"></a>命令小结</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker attach      <span class="token comment"># Attach local standard input, output, and error streams to a running container</span><span class="token comment"># 当前shell下attach连接指定运行镜像</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker build<span class="token comment"># Build an image from a Dockerfile</span><span class="token comment"># 通过Dockerfile 定制镜像</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker commit<span class="token comment"># Create a new image from a container's changes</span><span class="token comment"># 提交当前容器为新的镜像</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker <span class="token function">cp</span><span class="token comment"># Copy files/folders between a container and the local filesystem</span><span class="token comment"># 从容器中拷贝指定文件或目录到宿主机中</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker create<span class="token comment"># Create a new container</span><span class="token comment"># 创建一个新的容器，同run，但不启动容器</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker <span class="token function">diff</span><span class="token comment"># Inspect changes to files or directories on a container's filesystem</span><span class="token comment"># 查看docker容器的变化</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker events<span class="token comment"># Get real time events from the server</span><span class="token comment"># 从docker服务获取容器实时事件</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker <span class="token builtin class-name">exec</span><span class="token comment"># Run a command in a running container</span><span class="token comment"># 在已存在的容器上运行命令</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker <span class="token builtin class-name">export</span><span class="token comment"># Export a container's filesystem as a tar archive</span><span class="token comment"># 到处容器的内容流作为一个tar归档文件，对应import</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker <span class="token function">history</span><span class="token comment"># Show the history of an image</span><span class="token comment"># 查看一个镜像的历史</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker images<span class="token comment"># List images</span><span class="token comment"># 列出当前系统中所有的镜像</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker <span class="token function">import</span><span class="token comment"># Import the contents from a tarball to create a filesystem image</span><span class="token comment"># 从tar包中的内容创建一个新的文件系统，对应export</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker info<span class="token comment"># Display system-wide information</span><span class="token comment"># 显示系统相关信息</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker inspect<span class="token comment"># Return low-level information on Docker objects</span><span class="token comment"># 查看容器详细信息</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker <span class="token function">kill</span><span class="token comment"># Kill one or more running containers</span><span class="token comment"># kill指定docker容器</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker load<span class="token comment"># Load an image from a tar archive or STDIN</span><span class="token comment"># 从一个tar包中加载一个镜像，对应save</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker login<span class="token comment"># Log in to a Docker registry</span><span class="token comment"># 注册或者登录一个docker源服务器</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker <span class="token builtin class-name">logout</span><span class="token comment"># Log out from a Docker registry</span><span class="token comment"># 从当前docker registry退出</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker logs<span class="token comment"># Fetch the logs of a container</span><span class="token comment"># 输出当前容器日志信息</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker pause<span class="token comment"># Pause all processes within one or more containers</span><span class="token comment"># 暂停容器</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker port<span class="token comment"># List port mappings or a specific mapping for the container</span><span class="token comment"># 查看映射端口对应容器内幕源端口</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker <span class="token function">ps</span><span class="token comment"># List containers</span><span class="token comment"># 列出容器列表</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker pull<span class="token comment"># Pull an image or a repository from a registry</span><span class="token comment"># 从docker镜像源服务器拉取指定镜像或者库镜像</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker push<span class="token comment"># Push an image or a repository to a registry</span><span class="token comment"># 推送指定镜像或者库镜像到dicker源服务器</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker <span class="token function">rename</span><span class="token comment"># Rename a container</span><span class="token comment"># 对容器重命名</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker restart<span class="token comment"># Restart one or more containers</span><span class="token comment"># 重启运行的容器</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker <span class="token function">rm</span><span class="token comment"># Remove one or more containers</span><span class="token comment"># 移除一个或者多个容器</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker rmi<span class="token comment"># Remove one or more images</span><span class="token comment"># 移除一个或者多个镜像，五容器使用该镜像才可删除，否则需要删除相关容器才可以或者强制删除</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker run<span class="token comment"># Run a command in a new container</span><span class="token comment"># 创建一个新的容器并运行一个命令</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker save<span class="token comment"># Save one or more images to a tar archive (streamed to STDOUT by default)</span><span class="token comment"># 保存一个镜像为一个tar包，对应load</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker search<span class="token comment"># Search the Docker Hub for images</span><span class="token comment"># 在docker hub中搜索镜像</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker start<span class="token comment"># Start one or more stopped containers</span><span class="token comment"># 启动容器</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker stats<span class="token comment"># Display a live stream of container(s) resource usage statistics</span><span class="token comment"># 显示容器资源的状态</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker stop<span class="token comment"># Stop one or more running containers</span><span class="token comment"># 停止容器</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker tag<span class="token comment"># Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE</span><span class="token comment"># 给源镜像打一个标签</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker <span class="token function">top</span><span class="token comment"># Display the running processes of a container</span><span class="token comment"># 查看容器中运行的进程信息</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker unpause<span class="token comment"># Unpause all processes within one or more containers</span><span class="token comment"># 取消暂停容器</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker update<span class="token comment"># Update configuration of one or more containers</span><span class="token comment"># 更新一个或者多个容器的配置</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker version<span class="token comment"># Show the Docker version information</span><span class="token comment"># 查看docker版本号</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker <span class="token function">wait</span><span class="token comment"># Block until one or more containers stop, then print their exit codes</span><span class="token comment"># 截取容器停止时的退出状态值。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><h4 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker search nginx<span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker pull nginx<span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker run -d --name nginx00 -p <span class="token number">2233</span>:80 nginx<span class="token comment"># 后台启动nginx 并设置名称 nginx00 映射端口 宿主机2233 -&gt; 容器80</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker <span class="token function">ps</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ <span class="token function">curl</span> localhost:2233<span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker <span class="token builtin class-name">exec</span> -it nginx00 /bin/bashroot@fca2fac49368:/$ <span class="token function">whereis</span> nginx <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>存在问题</strong></p><p>每次改动nignx配置文件，都需要进入容器内部，十分的麻烦</p><p><strong>解决方案</strong></p><p>在容器外部宿主机上提供一个映射路径，达到在容器外修改文件，容器内不就可以修改的目的，-v 数据卷</p></blockquote><h4 id="tomcat"><a href="#tomcat" class="headerlink" title="tomcat"></a><strong>tomcat</strong></h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker run -it --rm tomcat:9.0 <span class="token comment"># 一般用来测试，用完就删除，及--rm</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker search tomcat<span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker pull tomcat:9.0<span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker run -d --name tomcat9.0_00 -p <span class="token number">2233</span>:8080 tomcat:9.0<span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker <span class="token function">ps</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ <span class="token function">curl</span> localhost:2233root@714059eea83c$ docker <span class="token builtin class-name">exec</span> -it tomcat9.0_00 /bin/bash<span class="token function">ls</span> -al<span class="token builtin class-name">cd</span> /usr/local/tomcat<span class="token function">cp</span> -r webapps.dist/* webapps<span class="token comment"># 实际上，这里启动的时阉割版镜像，及默认最小的镜像，所以不必要的都被剔除掉了</span><span class="token comment"># 故：linux命令少，没有webapps。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>存在问题</p><p>每次部署项目，需要进入到容器进行拷贝文件十分麻烦。如果所有的文件都放到容器内部，eg. mysql 如果删除了镜像或者容器，导致所有数据丢失？</p><p>解决方案</p><p>同上</p></blockquote><h4 id="es-kibana"><a href="#es-kibana" class="headerlink" title="es+kibana"></a><strong>es+kibana</strong></h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># elasticsearch 暴露的端口很多、十分的耗内存、数据一般需要放置到安全目录 挂载</span><span class="token comment"># 官方启动命令</span><span class="token comment"># $ docker run -d --name elasticsearch --net somenetwork -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" elasticsearch:tag</span><span class="token comment"># --net somenetwork ？ docker的网络配置</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker run -d --name elasticsearch -p <span class="token number">9200</span>:9200 -p <span class="token number">9300</span>:9300 -e <span class="token string">"discovery.type=single-node"</span> elasticsearch:7.6.2<span class="token comment"># 启动后十分的卡 docker stats 查看cpu状态</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker stats  <span class="token variable">${id}</span>?<span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker stop elasticsearch<span class="token comment"># 添加限制的启动</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker run -d --name elasticsearch -p <span class="token number">9200</span>:9200 -p <span class="token number">9300</span>:9300 -e <span class="token string">"discovery.type=single-node"</span> -e <span class="token assign-left variable">ES_JAVA_OPTS</span><span class="token operator">=</span><span class="token string">"-Xms64m -Xmax512m"</span> elasticsearch:7.6.2<span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ <span class="token function">curl</span> localhost:9200<span class="token comment">####################################</span><span class="token comment"># kibana 连接  es</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h3><ul><li>portainer</li><li>rancher（CI/CD）</li></ul><h4 id="portainer"><a href="#portainer" class="headerlink" title="portainer"></a>portainer</h4><p>Docker图像化管理工具，提供了一个后台面板</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">root@qing /<span class="token punctuation">]</span>$ docker run -d -p <span class="token number">8088</span>:9000 <span class="token punctuation">\</span>--restart<span class="token operator">=</span>always -v /var/run/docker.sock:/var/run/docker.sock --privileged<span class="token operator">=</span>true portainer/portainer<span class="token comment"># -v 挂载  宿主机:容器</span><span class="token comment"># --privileged 授权</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker镜像</h2><h3 id="镜像是什么"><a href="#镜像是什么" class="headerlink" title="镜像是什么"></a>镜像是什么</h3><p>镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的所有内容，包括代码、运行时的库、环境变量和配置文件</p><p>所有的应用，直接打包docker镜像，就可以直接跑起来</p><ul><li>从远程仓库pull</li><li>拷贝文件</li><li>自己制作一个镜像 dockerFile</li></ul><h3 id="Docker镜像加速原理"><a href="#Docker镜像加速原理" class="headerlink" title="Docker镜像加速原理"></a>Docker镜像加速原理</h3><blockquote><p>UnionFS（联合文件系统）</p></blockquote><p>UnionFS（联合文件系统）：Union文件系统是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下（unite several directories into a single virtual file system）。Union文件系统时Docker镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。</p><p>特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录</p><blockquote><p>Docker镜像加载原理</p></blockquote><p>docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统UnionFS。</p><p>bootfs（boot file system）主要包含bootloader和kernel，bootloader主要是引导加载kernel，Linux刚启动时会加载bootfs文件系统，在Docker镜像的最底层就是bootfs。这一层与我们典型的Linux/Unix系统一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已有bootfs转交给内核，此时系统也会卸载bootfs。</p><p>rootfs（root file system），在bootfs之上，包含典型Linux系统中的/dev 、/proc、/bin、/etc等标准目录和文件。rootfs就是各种不同的操作系统发行版本，eg. Ubuntu Centos…</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker inspect 镜像id<span class="token comment"># 查看镜像信息</span><span class="token comment"># rootFS</span><span class="token comment">#  "RootFS": {</span><span class="token comment">#             "Type": "layers",</span><span class="token comment">#             "Layers": [</span><span class="token comment">#                 "sha256:764055ebc9a7a290b64d17cf9ea550f1099c202d83795aa967428ebdf335c9f7",</span><span class="token comment">#                 "sha256:71a14cc55692a4edac5da18be420acf085c681ec95f7af5ff64bb1c236440d59",</span><span class="token comment">#                 "sha256:50854886015e8e202f3197c6a95ae60632a432aba673188bb7c3f9ee80ed2f30",</span><span class="token comment">#                 "sha256:1952fb2b0eb4d355f05a815c6d804243f089e05c0b8f3b1c1eaf0a1109e8293a",</span><span class="token comment">#                 "sha256:893f6aea2ce23f813c44180ccb7a41e8a4d151cb02f7c365cc4e837c0872b211",</span><span class="token comment">#                 "sha256:b8d0aeaeeee8ed55cb6bfc7e061d0bb0491e91024790c45d0c56b07c29cea080",</span><span class="token comment">#                 "sha256:d7cde20f3f6895bd6e6b2ef5767ee60d7034babe62093340ac22df5c8622db74",</span><span class="token comment">#                 "sha256:ae8fcba6091c17b6691f9a1c49621f193e2f475b3eee44d83b4f78b0d0fd31ae",</span><span class="token comment">#                 "sha256:1a4de2199d77be12009ed995b8db1c5a85d9a9b5e19673a8af4824de03f4ce0a",</span><span class="token comment">#                 "sha256:eeabd280c12ee308111950fd99ba8ffdd75130b6d948ba6a34fe6221b82f20dd",</span><span class="token comment">#                 "sha256:cd0c4980990f734130353adfa00f88ba57bc946b868468d633eeb75abd465fa0",</span><span class="token comment">#                 "sha256:027a41439ba438753333f44da1bc57b86e2211f708ace53343cc733151dc2380"</span><span class="token comment">#             ]</span><span class="token comment">#         },</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>精简后的OS，rootfs可以很小，只包含最基本的命令，工具和程序库就可以了，因为底层直接用Host到Kernel，自己只需要提供rootfs就可以了。达到公用bootfs的目的。</p><img src="/2021/12/25/devops/docker-notes/0006.png" class="" title="多层文件1"><img src="/2021/12/25/devops/docker-notes/0007.png" class="" title="多层文件2"><blockquote><p>进一步说明</p></blockquote><p>所有的Docker镜像都起始于一个既相互镜像层，当进行修改或者增加新的内容时，就会在当前镜像层之上，创建一个新的镜像层。</p><img src="/2021/12/25/devops/docker-notes/0008.png" class="" title="示意图"><p>在添加额外的镜像层的同时，镜像始终保持是当前所有镜像的组合。及每个镜像层包含了3个文件，而镜像包含了来及两个镜像层的六个文件</p><img src="/2021/12/25/devops/docker-notes/0009.png" class="" title="示意图"><p>一个稍微复杂的三层镜像，在外部看来整个镜像只有6个文件，因为最上层中的app2.0是app1.0的一个更新版本。</p><img src="/2021/12/25/devops/docker-notes/0010.png" class="" title="示意图"><p>这种情况下，上层镜像层中的文件覆盖了底层镜像层中的文件，使得文件的更新版本作为一个新镜像层添加到镜像中。</p><p>Docker通过存储引擎（新版本采用快照机制）的方式来实现镜像层堆栈，并保证多镜像层对外展示为统一 文件系统。</p><p>Linux上可用的存储引擎由AUFS、Overlay2、Device Mapper、Btrfs以及ZFS。顾名思义，每种存储引擎都基于Linux中对应的文件系统或者块设备技术，并且每种存储引擎都有其独特的性能特点</p><p>Docker在Windows上仅支持windowsfilter一种存储引擎，该引擎基于NTFS文件系统之上实现了分层和CoW [①]。</p><p>所有镜像层堆叠合并后，对外统一提供如上图所示的合并图</p><blockquote><p>特点</p></blockquote><p>Docker镜像都是只读的，当容器启动是，一个新的可写层被加载到镜像的顶部，这一层就是容器层，容器之下的都是叫镜像层。（无限套娃？？？）</p><h3 id="commit镜像"><a href="#commit镜像" class="headerlink" title="commit镜像"></a>commit镜像</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 提交容器成为一个新的副本容器</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker commit<span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker commit -m<span class="token operator">=</span><span class="token string">"description"</span> -a<span class="token operator">=</span><span class="token string">"author"</span> 容器id 目标镜像:<span class="token punctuation">[</span>TAG<span class="token punctuation">]</span><span class="token comment"># test</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker run -it -p <span class="token number">8080</span>:8080 tomcat<span class="token comment"># new terminal</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker <span class="token function">ps</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker <span class="token builtin class-name">exec</span> -it <span class="token variable">${id}</span> /bin/bashroot@sdfj0adf98 /$ <span class="token builtin class-name">cd</span> /usr/local/tomcatroot@sdfj0adf98 /$ <span class="token function">cp</span> -r webapps.dist/* webapps <span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker commit -m<span class="token operator">=</span><span class="token string">"description"</span> -a<span class="token operator">=</span><span class="token string">"author"</span> 容器id 目标镜像:<span class="token punctuation">[</span>TAG<span class="token punctuation">]</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker images<span class="token comment"># 将镜像保存为压缩包</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker save -o qing.tar qing:v1.0<span class="token comment"># 在别的机器上加载该镜像</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker load -i qing.tar<span class="token comment"># 将旧镜像名称修改为新版名称</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker tag qing:v1.0 sunq/qing:v1.0<span class="token comment"># 登录到docker hub</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker login<span class="token comment"># 推送至仓库</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker push sunq/qing:v1.0<span class="token comment"># 完成推送后，退出登录</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker <span class="token builtin class-name">logout</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/12/25/devops/docker-notes/0011.png" class="" title="示意图"><h2 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h2><p>Q：数据可用放在容器里面么？</p><p>A：不能，因为容器如果被删除，会导致数据永久的丢失，所以需要<strong>数据持久化</strong></p><p>所以就有了容器的卷技术，容器之间可用有一个数据共享，将Docker容器中产生的数据同步到本地中 —— 目录挂载，将我们容器内的目录，挂载到Linux上面。将宿主机的内存共享给容器，双向绑定。</p><p><strong>容器持久化和同步操作，容器间也可以数据共享。</strong></p><h3 id="挂载链接"><a href="#挂载链接" class="headerlink" title="挂载链接"></a>挂载链接</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 直接使用命令来挂载 -v</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker run -it 主机目录:容器目录 （镜像）<span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker run -it -v /home/ceshi:/home centos /bin/bash<span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker inspect 容器Id<span class="token comment"># “Mounts”</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ <span class="token builtin class-name">cd</span> /home/ceshi<span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ <span class="token function">ls</span><span class="token comment"># 在容器内创建文件</span><span class="token punctuation">[</span>root@sdfuo098sadf /<span class="token punctuation">]</span>$ <span class="token function">ls</span> /home<span class="token punctuation">[</span>root@sdfuo098sadf /<span class="token punctuation">]</span>$ <span class="token function">touch</span> test.java<span class="token comment"># 在宿主机中查看是否文件被同步创建</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ <span class="token function">ls</span> /home/ceshi<span class="token comment"># [root@qing /]$ docker exec -it 容器id /bin/bash  # 进入后台运行的容器，/bin/bash 位置开启一个新的终端，可以进行一些操作(常用)</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker attach 容器id<span class="token comment">#  进入正在执行的容器进入正在运行的中断，不会启动新的进程</span><span class="token punctuation">[</span>root@sdfuo098sadf /<span class="token punctuation">]</span>$ <span class="token builtin class-name">exit</span><span class="token comment"># 退出容器后，在宿主机上修改文件</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ <span class="token function">vim</span> /home/ceshi/test.java<span class="token comment"># 重新启动容器，查看容器中的该文件是被同步修改</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 拉取镜像</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker pull mysql:5.7<span class="token comment"># 官方的启动命令</span><span class="token comment"># 启动容器时挂载目录, 配置密码</span><span class="token comment"># -e 环境配置</span><span class="token comment"># $ docker run -it --network some-network --rm mysql mysql -hsome-mysql -uexample-user -p</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker run -d -p <span class="token number">2233</span>:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> --name mysql01 mysql:5.7<span class="token comment"># 可用连接创建数据库查看是否持久化成功。</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker <span class="token function">rm</span> -f mysql01<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="具名挂载和匿名挂载"><a href="#具名挂载和匿名挂载" class="headerlink" title="具名挂载和匿名挂载"></a>具名挂载和匿名挂载</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 不指定主机目录，会自动挂载</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$  docker run -d -P --name nginx01 -v /etc/nginx nginx<span class="token comment"># 注意 -v 后不添加/ 表明不是目录</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$  docker run -d -P --name nginx02 -v juming_nginx:/etc/nginx nginx<span class="token comment"># 查看所有的卷情况</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker volume <span class="token function">ls</span>DRIVER    VOLUME NAME<span class="token builtin class-name">local</span>     0a99e217ac4ba4842c205b7fe1aae0146425e56b96df7628d78e10198f1337ce<span class="token builtin class-name">local</span>     juming_nginx<span class="token comment"># 可用看出，第一个就是匿名挂载，在 -v 之后只写了容器内的路径，没有写宿主机的路径</span><span class="token comment"># 第二个就是具名挂载 -v 卷名:容器内路径 </span><span class="token comment"># 查看卷的所在目录</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker volume inspect juming_nginx<span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token string">"CreatedAt"</span><span class="token builtin class-name">:</span> <span class="token string">"2021-12-29T23:28:25+08:00"</span>,        <span class="token string">"Driver"</span><span class="token builtin class-name">:</span> <span class="token string">"local"</span>,        <span class="token string">"Labels"</span><span class="token builtin class-name">:</span> null,        <span class="token string">"Mountpoint"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/lib/docker/volumes/juming_nginx/_data"</span>,        <span class="token string">"Name"</span><span class="token builtin class-name">:</span> <span class="token string">"juming_nginx"</span>,        <span class="token string">"Options"</span><span class="token builtin class-name">:</span> null,        <span class="token string">"Scope"</span><span class="token builtin class-name">:</span> <span class="token string">"local"</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token comment"># Mountpoint 就是挂载的目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有的docker容器内的卷，没有指定目录的情况下都是在 <code>/var/lib/docker/volumes/xxxxxx/_data</code></p><p>通过具名挂载可用很方便的找到一个卷，通常情况下都是使用具名挂载</p><h4 id="挂载小总结"><a href="#挂载小总结" class="headerlink" title="挂载小总结"></a>挂载小总结</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 具名挂载、匿名挂载、指定路径挂载</span>-v 容器内路径<span class="token comment"># 匿名挂载</span>-v 卷名:容器内路径<span class="token comment"># 具名挂载</span>-v /宿主机路径:容器内路径<span class="token comment"># 指定路径挂载</span><span class="token comment"># 通过 -v 容器内路径:ro rw 改变读写权限</span><span class="token comment"># 一旦设置了容器权限，容器对我们挂载出来的容器就有了限定 </span><span class="token comment"># ro 这个路径就只能通过宿主机来操作，容器内部是无法操作的</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker run -d -P --name nginx03: -v juming_nginx:/etc/nginx:ro nginx<span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker run -d -P --name nginx04 -v juming_nginx:/etc/nginx:rw nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="dockerFile实现挂载"><a href="#dockerFile实现挂载" class="headerlink" title="dockerFile实现挂载"></a>dockerFile实现挂载</h3><p>命令脚本，可用通过这个脚本来生成镜像，镜像是一层一层的卷，脚本就是一个一个的命令，每个命令就是一层！</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ <span class="token function">mkdir</span> /home/docker-test-volume<span class="token comment"># 创建dockerFile文件</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ <span class="token function">vim</span> dockerFile1<span class="token comment">#############################dockerFile1##############</span>FROM centosVOLUME <span class="token punctuation">[</span><span class="token string">"volume01"</span>,<span class="token string">"volume02"</span><span class="token punctuation">]</span>CMD <span class="token builtin class-name">echo</span> <span class="token string">"------end------"</span>CMD /bin/bash<span class="token comment">############################dockerFile1##############</span><span class="token comment"># 根据dockerFile 生成镜像</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker build -f ./dockerFile1 -t qing/centos:1.0 <span class="token builtin class-name">.</span>Sending build context to Docker daemon  <span class="token number">240</span>.7MBStep <span class="token number">1</span>/4 <span class="token builtin class-name">:</span> FROM centos ---<span class="token operator">&gt;</span> 5d0da3dc9764Step <span class="token number">2</span>/4 <span class="token builtin class-name">:</span> VOLUME <span class="token punctuation">[</span><span class="token string">"volume01"</span>,<span class="token string">"volume02"</span><span class="token punctuation">]</span> ---<span class="token operator">&gt;</span> Running <span class="token keyword">in</span> eb142d0e83adRemoving intermediate container eb142d0e83ad ---<span class="token operator">&gt;</span> ba3e07adb20bStep <span class="token number">3</span>/4 <span class="token builtin class-name">:</span> CMD <span class="token builtin class-name">echo</span> <span class="token string">"------end------"</span> ---<span class="token operator">&gt;</span> Running <span class="token keyword">in</span> 372a86750520Removing intermediate container 372a86750520 ---<span class="token operator">&gt;</span> 8feb17962dffStep <span class="token number">4</span>/4 <span class="token builtin class-name">:</span> CMD /bin/bash ---<span class="token operator">&gt;</span> Running <span class="token keyword">in</span> b198098a4925Removing intermediate container b198098a4925 ---<span class="token operator">&gt;</span> 0a15ea858d6bSuccessfully built 0a15ea858d6bSuccessfully tagged qing/centos:1.0<span class="token comment"># 查看镜像</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker imagesREPOSITORY    TAG       IMAGE ID       CREATED         SIZEqing/centos   <span class="token number">1.0</span>       0a15ea858d6b   <span class="token number">6</span> seconds ago   231MB<span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker run -it qing/centos:1.0 <span class="token function">bash</span><span class="token punctuation">[</span>root@ef4ca52a471a /<span class="token punctuation">]</span><span class="token comment"># ls</span>bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var  volume01volume02<span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker inspect ef4ca52a471a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="容器间共享数据"><a href="#容器间共享数据" class="headerlink" title="容器间共享数据"></a>容器间共享数据</h3><p>通过数据卷容器来达到容器间的共享</p><img src="/2021/12/25/devops/docker-notes/0015.png" class="" title="示意图"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 启动父容器</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker run -it --name docker01 qing/centos:1.0 <span class="token function">bash</span><span class="token comment"># 启动第二个</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker run -it --name docker02 --volumes-from docker01 qing/centos:1.0 <span class="token function">bash</span><span class="token comment"># 在父容器中创建文件 会被同步到子容器中</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：这里其实是容器都挂载到宿主机的同一个目录下了，并不是多个目录之间在同步，如果删除宿主机下的这个目录的文件，容器内的数据就会消失</p><h2 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h2><p>dockerFile 是用来构建docker镜像的构建脚本。</p><p>大致步骤</p><ol><li>编写一个dockerFile文件</li><li>docker build 构建一个镜像</li><li>docker  run 运行镜像</li><li>docker push 发布镜像</li></ol><blockquote><p>每个保留关键字（指令）都是大写</p><p>执行从上到下顺序执行</p><p>/# 表示注释</p><p>每个指令都会创建提交一个新的镜像层，并提交。</p></blockquote><img src="/2021/12/25/devops/docker-notes/0016.png" class="" title="示意图"><h3 id="指令简述"><a href="#指令简述" class="headerlink" title="指令简述"></a>指令简述</h3><table><thead><tr><th>指令</th><th>说明</th></tr></thead><tbody><tr><td>FROM</td><td>基础镜像，从这里开始</td></tr><tr><td>MAINTAINER</td><td>镜像的作者</td></tr><tr><td>RUN</td><td>镜像构建的时候需要运行的命令</td></tr><tr><td>ADD</td><td>编译镜像时复制文本到镜像中</td></tr><tr><td>COPY</td><td>类似ADD，将文件拷贝到镜像中</td></tr><tr><td>WORKDIR</td><td>镜像的工作目录，设置RUN CMD ENTRYPOINT COPY ADD指令的工作目录</td></tr><tr><td>LABEL</td><td>设置镜像的标签</td></tr><tr><td>VOLUME</td><td>挂载的目录</td></tr><tr><td>EXPOSE</td><td>设置镜像暴露的端口</td></tr><tr><td>CMD</td><td>指定这个容器启动的时候要运行的命令，只有最后一个会生效，可被代替</td></tr><tr><td>ENTRYPOINT</td><td>指定这个容器启动的时候要运行的命令，可用追加命令</td></tr><tr><td>ONBUILD</td><td>当构建一个被继承DockerFile这个时候就会运行onbuild的指令，触发指令</td></tr><tr><td>ARG</td><td>设置编译镜像时加入的参数</td></tr><tr><td>ENV</td><td>构建的时候设置的环境变量</td></tr><tr><td>USER</td><td>设置运行RUN CMD ENTRYPOINT的用户名</td></tr><tr><td>STOPSIGNAL</td><td>设置容器的退出信号量</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><h3 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h3><p>Docker Hub中99%镜像都是从一个基础镜像scratch过来的。</p><blockquote><p>FROM scratch</p></blockquote><h4 id="制作一个简单的centos扩展镜像"><a href="#制作一个简单的centos扩展镜像" class="headerlink" title="制作一个简单的centos扩展镜像"></a>制作一个简单的centos扩展镜像</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ <span class="token function">vim</span> docker_file_centos<span class="token comment">############################docker_file_centos##############</span>FROM centosMAINTAINER qing<span class="token operator">&lt;</span><span class="token number">111</span>@qq.com<span class="token operator">&gt;</span>ENV MYPATH /usr/localWORKDIR <span class="token variable">$MYPATH</span>RUN yum -y <span class="token function">install</span> <span class="token function">vim</span>RUN yum -y insatll net-toolsEXPOSE <span class="token number">80</span>CMD <span class="token builtin class-name">echo</span> <span class="token string">"------end-----"</span>CMD /bin/bash<span class="token comment">############################docker_file_centos##############</span><span class="token comment"># 在官方的centos基础上添加了vim 和 net-tools</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker build -f home/doker_files/docker_file_centos -t qing/centos:1.1 <span class="token builtin class-name">.</span><span class="token comment"># 可用启动测试下 ipconfig vim 命令</span><span class="token comment"># 查看下镜像构建的历史</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker <span class="token function">history</span> 镜像id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用tar制作tomcat镜像"><a href="#使用tar制作tomcat镜像" class="headerlink" title="使用tar制作tomcat镜像"></a>使用tar制作tomcat镜像</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ <span class="token function">ls</span>apache-tomcat-9.0.56.tar.gz jdk1.8.0_181<span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ <span class="token function">touch</span> readme.md<span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ <span class="token function">vim</span> Dockerfile <span class="token comment"># 该命令 build是会自动讯在，不用-f指定 </span><span class="token comment">############################Dockerfile##############</span>FROM centosMAINTAINER qing<span class="token operator">&lt;</span><span class="token number">111</span>@qq.com<span class="token operator">&gt;</span>COPY readme.md /usr/local/readme.txt<span class="token comment"># 直接复制</span>COPY jdk1.8.0_181/ /usr/local/jdk1.8.0_181/<span class="token comment"># 会自动解压</span>ADD apache-tomcat-9.0.56.tar /usr/local/RUN yum -y <span class="token function">install</span> <span class="token function">vim</span> ENV MYPATH /usr/localWORKDIR <span class="token variable">$MYPATH</span>ENV JAVA_HOME /usr/local/jdk1.8.0_181ENV CLASSPATH <span class="token variable">$JAVA_HOME</span>/lib/dt.jar:<span class="token variable">$JAVA_HOME</span>/lib/tools.jarENV CATALINA_HOME /usr/local/apache-tomcat-9.0.56ENV CATALINA_BASH /usr/local/apache-tomcat-9.0.56ENV <span class="token environment constant">PATH</span> <span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$JAVA_HOEM</span>/bin:<span class="token variable">$CATALINA_HOME</span>/lib:<span class="token variable">$CATALINA_HOME</span>/binEXPOSE <span class="token number">8080</span>CMD /usr/local/apache-tomcat-9.0.56/bin/startup.sh <span class="token operator">&amp;&amp;</span> <span class="token function">tail</span> -F /url/localapache-tomcat-9.0.56/bin/logs/catalina.out<span class="token comment">############################Dockerfile##############</span><span class="token comment"># 构建启动</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker build -t qing/tomcat:1.0 <span class="token builtin class-name">.</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker images<span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker run -d -p <span class="token number">2233</span>:8080 --name qingtomcat -v /home/qing/tomcat/test:/usr/local/apache-tomcat-9.0.56/webapps/test -v /home/qing/tomcat/logs:/usr/local/apache-tomcat-9.0.56/logs qing/tomcat:1.0<span class="token comment"># 测试</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ <span class="token function">curl</span> localhost:2233<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">[root@qing /]$ mkdir /home/qing/tomcat/test/EB-INF[root@qing /]$ cd /home/qing/tomcat/test/EB-INF[root@qing /]$ vim web.xml############################web.xml##############&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;web-app xmlns="http://java.sun.com/xml/ns/javaee"         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee                             http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"         ersion="2.5"&gt;&lt;/web-app&gt;  ############################web.xml##############[root@qing /]$ cd ..[root@qing /]$ vim index.jsp############################index.jsp##############&lt;html&gt;&lt;head&gt;&lt;title&gt;Hello World&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Hello World!&lt;br/&gt;&lt;%System.out.println("Your IP address is " + request.getRemoteAddr());%&gt;&lt;/body&gt;&lt;/html&gt;############################index.jsp##############<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="命令说明"><a href="#命令说明" class="headerlink" title="命令说明"></a>命令说明</h3><h4 id="CMD和ENTRYPOINT的区别"><a href="#CMD和ENTRYPOINT的区别" class="headerlink" title="CMD和ENTRYPOINT的区别"></a>CMD和ENTRYPOINT的区别</h4><ul><li>CMD<ul><li>启动的时候如果在最后追加了命令会替换掉镜像中的命令</li></ul></li><li>ENRYPOINT<ul><li>启动后如果在最后追加了命令，不会替换镜像中的命令，而是在其后追加</li></ul></li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ <span class="token function">vim</span> docker_file_cmd<span class="token comment">############################docker_file_cmd##############</span>FROM centosCMD <span class="token punctuation">[</span><span class="token string">"ls"</span>,<span class="token string">"-a"</span><span class="token punctuation">]</span><span class="token comment">############################docker_file_cmd##############</span><span class="token comment"># 在官方的centos基础上添加了vim 和 net-tools</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker build -f home/doker_files/docker_file_cmd -t qing/centos:1.2 <span class="token builtin class-name">.</span><span class="token comment"># 直接运行会发现 ls -a 执行了</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span><span class="token variable">$dovker</span> run centos:1.2<span class="token comment"># 追加命令执行</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span><span class="token variable">$dovker</span> run centos:1.2 -lerror<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ <span class="token function">vim</span> docker_file_entrypoint<span class="token comment">############################docker_file_entrypoint##############</span>FROM centosENTRYPOINT <span class="token punctuation">[</span><span class="token string">"ls"</span>,<span class="token string">"-a"</span><span class="token punctuation">]</span><span class="token comment">############################docker_file_entrypoint##############</span><span class="token comment"># 在官方的centos基础上添加了vim 和 net-tools</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker build -f home/doker_files/docker_file_entrypoint -t qing/centos:1.3 <span class="token builtin class-name">.</span><span class="token comment"># 直接运行会发现 ls -a 执行了</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ dovker run centos:1.2<span class="token comment"># 追加命令执行，会发现 执行了 ls -a -l</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ dovker run centos:1.2 -l<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="发布镜像"><a href="#发布镜像" class="headerlink" title="发布镜像"></a>发布镜像</h3><h4 id="DockerHub"><a href="#DockerHub" class="headerlink" title="DockerHub"></a>DockerHub</h4><ol><li><p>地址<a href="http://hub.docker.com/">http://hub.docker.com/</a> 注册自己的账号</p></li><li><p>在服务器上提交自己的镜像</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 登录自己账户号</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker login -u qingPassword:Login Succeeded<span class="token comment"># 提交镜像 尽量带上自己的版本号</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker push  qing/tomcat:1.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="阿里云容器镜像服务"><a href="#阿里云容器镜像服务" class="headerlink" title="阿里云容器镜像服务"></a>阿里云容器镜像服务</h4><ol><li>登录阿里云，找到容器镜像服务</li><li>根据需求创建命名空间、</li><li>创建容器镜像</li><li>根据阿里云上的操作指南进行提交</li></ol><h2 id="流程小结"><a href="#流程小结" class="headerlink" title="流程小结"></a>流程小结</h2><img src="/2021/12/25/devops/docker-notes/0017.png" class="" title="流程图"><h2 id="Docker-网络"><a href="#Docker-网络" class="headerlink" title="Docker 网络"></a>Docker 网络</h2><h3 id="实验查看"><a href="#实验查看" class="headerlink" title="实验查看"></a>实验查看</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 查看IP地址</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ <span class="token function">ip</span> addr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/2021/12/25/devops/docker-notes/0018.png" class="" title="输出说明"><p>Q：docker如何处理容器网络访问的？</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker run -d -P --name tomcat01 tomcat<span class="token comment"># 查看容器的内部Ip地址</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker <span class="token builtin class-name">exec</span> -it tomcat01 <span class="token function">ip</span> addr<span class="token comment">## 如果 报错 OCI runtime exec failed: </span><span class="token comment">## 因为该tomcat镜像为了最小化，可能没有安装ip addr命令，故需要安装 iproute2</span><span class="token comment"># [root@qing /]$ docker exec -it tomcat01 bash</span><span class="token comment"># root@bd19d226252e $ apt update &amp;&amp; apt install -y iproute2</span><span class="token comment"># 再次输入</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker <span class="token builtin class-name">exec</span> -it tomcat01 <span class="token function">ip</span> addr<span class="token comment"># 查看一下容器的内部网络地址，发现容器启动的时候会得到一个eth0@if61的ip地址，该地址是由docker分配的 详细见 图0019</span>       <span class="token comment"># 可用通过宿主机ping 改ip</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ <span class="token function">ping</span> <span class="token number">172.18</span>.0.2<span class="token comment"># 与图片0018中的 docker0 172.18.0.1/16 可用得知该网络与docker0属于同一个网段</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/12/25/devops/docker-notes/0019.png" class="" title="输出说明"><h3 id="原理简述"><a href="#原理简述" class="headerlink" title="原理简述"></a>原理简述</h3><ol><li><p>每启动一个docker容器，docker就会给docker容器分配一个ip，只要安装了docker，就会有一个网卡docker0。通过桥接模式，使用的技术veth-pair技术进行连接。</p></li><li><p>再次在宿主机测试<code>ip addr</code>，对比图0019和图0020，可以看到了宿主机多了一个网卡，序号上与容器中是对应的</p><blockquote><p>容器带来的网卡都是一对存在的</p><p>veth-pair 就是一对虚拟设备接口，都是成对出现，一段连着协议，一段彼此相连。基于此特性，veth-pair充当一个桥梁，连接各种虚拟网络设备的</p><p>OpenStac、Docker容器之间的连接、OVS的连接，都是使用veth-pair 技术</p></blockquote><img src="/2021/12/25/devops/docker-notes/0020.png" class="" title="输出说明"></li><li><p>所以在启动多个容器的时候，由于都是由docker0分配的网卡的ip都属于同一个网段，所以容器之间也是可以相互访问的。</p></li></ol><img src="/2021/12/25/devops/docker-notes/0021.png" class="" title="示意图"><ol start="4"><li>所以，在启动容器时不指定网络的情况下，都是哟docker来分配一个默认的可用IP，且由docker0来进行路由</li></ol><p><strong>小结</strong></p><blockquote><p>Docker使用的是Linux的桥接，宿主机中的一个网卡docker0就是Docker的网桥 </p><p>docker中的所有网络接口都是虚拟的，虚拟的转发效率高、</p></blockquote><img src="/2021/12/25/devops/docker-notes/0022.png" class="" title="示意图"><h3 id="容器互联"><a href="#容器互联" class="headerlink" title="容器互联"></a>容器互联</h3><h4 id="–Link"><a href="#–Link" class="headerlink" title="–Link"></a>–Link</h4><blockquote><p>但是并不推荐使用 –link 进行容器连接。因为部分的自定义网络不适于使用docker0 进行路由，例如：不支持使用容器名进行连接</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker run -d -P --name tomcat01 tomcat<span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker run -d -P --name tomcat02 tomcat<span class="token comment"># 直接在容器间进行ping</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker <span class="token builtin class-name">exec</span> -it tomcat02 <span class="token function">ping</span> tomcat01<span class="token comment">## 如果 报错 OCI runtime exec failed: </span><span class="token comment">## 不支持ping命令时，则需要进入容器手动安装该命令</span><span class="token comment"># [root@qing /]$ docker exec -it tomcat02 bash</span><span class="token comment"># root@bd19d226252e $ apt update &amp;&amp; apt install iputils-ping</span>ping: tomcat01: Name or <span class="token function">service</span> not known  <span class="token comment"># 可知无法与tomcat01进行通信</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker run -d -P --name tomcat03 --link tomcat02 tomcat<span class="token comment"># 如果不存在ping命令，则需要同上面的方式安装 </span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker <span class="token builtin class-name">exec</span> -it tomcat03 <span class="token function">ping</span> tomcat02PING tomcat02 <span class="token punctuation">(</span><span class="token number">172.18</span>.0.3<span class="token punctuation">)</span> <span class="token number">56</span><span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">)</span> bytes of data.<span class="token number">64</span> bytes from tomcat02 <span class="token punctuation">(</span><span class="token number">172.18</span>.0.3<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.104</span> ms<span class="token number">64</span> bytes from tomcat02 <span class="token punctuation">(</span><span class="token number">172.18</span>.0.3<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.059</span> ms<span class="token comment"># 可用发现 通过--link 便可以在容器之间 通过服务名联通(不用指定ip)</span><span class="token comment"># 但是反向却无法ping通</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker <span class="token builtin class-name">exec</span> -it tomcat02 <span class="token function">ping</span> tomcat03<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这里 –link 是将tomcat03对tomcat02的连接添加到了配置项中，所以可用tomcat03可用访问到tomcat02。使用inspect命令查看docker的元数据可以看到如下配置</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker inspect tomcat03<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2021/12/25/devops/docker-notes/0023.png" class="" title="输出"><blockquote><p>也可以通过查看hosts配置</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker <span class="token builtin class-name">exec</span> -it tomcat03 <span class="token function">cat</span> /etc/hosts<span class="token comment"># 可以理解为在host文件中添加了域名映射</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/2021/12/25/devops/docker-notes/0024.png" class="" title="输出"><h3 id="自定义网络"><a href="#自定义网络" class="headerlink" title="自定义网络"></a>自定义网络</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker network <span class="token function">ls</span> <span class="token comment"># 查看所有网络</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2021/12/25/devops/docker-notes/0025.png" class="" title="输出"><h4 id="网络模式"><a href="#网络模式" class="headerlink" title="网络模式"></a>网络模式</h4><ul><li>bridge：桥接模式 （docker 默认）</li><li>none：不配置网络</li><li>host：与宿主机共享模式</li><li>container：容器网络连通（局限较大）</li></ul><h4 id="自定义网络-1"><a href="#自定义网络-1" class="headerlink" title="自定义网络"></a>自定义网络</h4><blockquote><p>可以修复docker0中，在不适用–link是，不支持直接使用容器名进行连接</p></blockquote><p><strong>自定义网络选择使用bridge模式</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 直接启动的容器，有一个默认参数为： --net bridge，这里使用的就是docker0</span><span class="token comment"># docker run -d -P --name tomcat01 --net bridge tomcat</span><span class="token comment"># 自定义一个网络</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker network create --driver bridge --subnet <span class="token number">192.168</span>.0.0/16 --gateway <span class="token number">192.168</span>.0.1 mynet<span class="token comment">## --driver 连接模式</span><span class="token comment">## --subnet 子网掩码</span><span class="token comment">## --gateway 路由ip</span><span class="token comment"># 故可以在启动的时候指定使用该自定义的网络</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker run -d -P --name tomcat-net-01 --net mynet tomcat<span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker run -d -P --name tomcat-net-02 --net mynet tomcat<span class="token comment"># 查看此时自定义网络的元数据</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker network inspect mynet <span class="token comment"># 图片0026中可以看到容器的网络</span><span class="token comment"># 此时使用自定义的网络直接通过容器名进行ping</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker <span class="token builtin class-name">exec</span> -it tomcat-net-01 <span class="token function">ping</span> tomcat-net-02<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/12/25/devops/docker-notes/0026.png" class="" title="输出"><h4 id="将不同网络连接"><a href="#将不同网络连接" class="headerlink" title="将不同网络连接"></a>将不同网络连接</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 将网络docker0下的tomcat01连接到 mynet网络下（达成一个容器两个ip）</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker network connect mynet tomcat01<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/2021/12/25/devops/docker-notes/0027.png" class="" title="示意图"><h4 id="demo-redis集群"><a href="#demo-redis集群" class="headerlink" title="demo-redis集群"></a>demo-redis集群</h4><blockquote><p>分片 集群 高可用</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 创建网卡</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker network create redis --subnet <span class="token number">172.38</span>.0.0/16<span class="token comment"># 通过脚本创建六个redis配置</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ <span class="token keyword">for</span> <span class="token for-or-select variable">port</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">seq</span> <span class="token number">1</span> <span class="token number">6</span><span class="token variable">)</span></span><span class="token punctuation">;</span> <span class="token punctuation">\</span><span class="token keyword">do</span> <span class="token punctuation">\</span><span class="token function">mkdir</span> -p /data/qing/redis/node-<span class="token variable">${port}</span>/conf<span class="token function">touch</span> /data/qing/redis/node-<span class="token variable">${port}</span>/conf/redis.conf<span class="token function">cat</span> <span class="token operator">&lt;&lt;</span> <span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">&gt;</span>/data/qing/redis/node-<span class="token variable">${port}</span>/conf/redis.conf</span>port 6379bind 0.0.0.0cluster-enabled yescluster-config-file nodes.confcluster-node-timeout 5000cluster-announce-ip 172.38.0.1<span class="token variable">${port}</span>cluster-announce-port 6379cluster-announce-bus-port 16379appendonly yesEOF</span><span class="token keyword">done</span><span class="token comment"># 启动六个容器</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ <span class="token keyword">for</span> <span class="token for-or-select variable">port</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">seq</span> <span class="token number">1</span> <span class="token number">6</span><span class="token variable">)</span></span><span class="token punctuation">;</span> <span class="token punctuation">\</span><span class="token keyword">do</span> <span class="token punctuation">\</span>docker run -p <span class="token number">637</span><span class="token variable">${port}</span>:6379 -p <span class="token number">1637</span><span class="token variable">${port}</span>:16379 --name redis-<span class="token variable">${port}</span> <span class="token punctuation">\</span>-v /data/qing/redis/node-<span class="token variable">${port}</span>/data:/data <span class="token punctuation">\</span>-v /data/qing/redis/node-<span class="token variable">${port}</span>/conf/redis.conf:/etc/redis/redis.conf <span class="token punctuation">\</span>-d --net redis --ip <span class="token number">172.38</span>.0.1<span class="token variable">${port}</span> redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf<span class="token punctuation">;</span> <span class="token punctuation">\</span><span class="token keyword">done</span><span class="token comment"># 进入容器创建集群</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker <span class="token builtin class-name">exec</span> -it redis-1 /bin/sh<span class="token comment"># 创建集群</span>/data $ redis-cli --cluster create <span class="token number">172.38</span>.0.11:6379 <span class="token number">172.38</span>.0.12:6379 <span class="token number">172.38</span>.0.13:6379 <span class="token number">172.38</span>.0.14:6379 <span class="token number">172.38</span>.0.15:6379 <span class="token number">172.38</span>.0.16:6379 --cluster-replicas <span class="token number">1</span><span class="token comment">#### 以下为输出 部分省略####</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Performing <span class="token builtin class-name">hash</span> slots allocation on <span class="token number">6</span> nodes<span class="token punctuation">..</span>.Master<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> -<span class="token operator">&gt;</span> Slots <span class="token number">0</span> - <span class="token number">5460</span>Master<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> -<span class="token operator">&gt;</span> Slots <span class="token number">5461</span> - <span class="token number">10922</span>Master<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> -<span class="token operator">&gt;</span> Slots <span class="token number">10923</span> - <span class="token number">16383</span>Adding replica <span class="token number">172.38</span>.0.15:6379 to <span class="token number">172.38</span>.0.11:6379<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All nodes agree about slots configuration.<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Check <span class="token keyword">for</span> <span class="token function">open</span> slots<span class="token punctuation">..</span>.<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Check slots coverage<span class="token punctuation">..</span>.<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All <span class="token number">16384</span> slots covered.<span class="token comment">#### 以上为输出 ####</span><span class="token comment"># 测试</span>/data $ redis-cli -c<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> cluster info<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> cluster nodes<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">set</span> a b-<span class="token operator">&gt;</span> Redirected to slot <span class="token punctuation">[</span><span class="token number">15495</span><span class="token punctuation">]</span> located at <span class="token number">172.38</span>.0.13:6379OK <span class="token comment"># 可以看出保存到了3号节点</span><span class="token comment"># 关闭一个容器 测试 172.38.0.13:6379 这里是 13 所以停掉3号</span><span class="token punctuation">[</span>root@qing /<span class="token punctuation">]</span>$ docker stop redis-3<span class="token comment"># 在容器内获取刚刚存入的值</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get a-<span class="token operator">&gt;</span> Redirected to slot <span class="token punctuation">[</span><span class="token number">15495</span><span class="token punctuation">]</span> located at <span class="token number">172.38</span>.0.14:6379<span class="token string">"b"</span> <span class="token comment"># 可以看到这里从4号机器中获取</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="IDEA整合Docker"><a href="#IDEA整合Docker" class="headerlink" title="IDEA整合Docker"></a>IDEA整合Docker</h2><ol><li><p>安装插件</p><blockquote><p>为了文件高亮，以及可以直接连接仓库</p></blockquote><img src="/2021/12/25/devops/docker-notes/0028.png" class="" title="示意图"><img src="/2021/12/25/devops/docker-notes/0029.png" class="" title="示意图"></li><li><p>通过package进行打包</p><blockquote><p>通过使用maven 的打包功能进行打包</p></blockquote></li><li><p>编写Dockerfile文件</p><blockquote><p>其他功能暂未研究</p></blockquote><img src="/2021/12/25/devops/docker-notes/0030.png" class="" title="示意图"></li><li><p>通过Dockerfile构建镜像与发布</p></li></ol><hr><p><strong>完</strong></p><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.bilibili.com/video/BV1og4y1q7M4?from=search&amp;seid=8833819761241839370">狂神说Docker</a> ：<a href="https://www.bilibili.com/video/BV1og4y1q7M4?share_source=copy_web">https://www.bilibili.com/video/BV1og4y1q7M4?share_source=copy_web</a></p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> command </tag>
            
            <tag> note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git命令详解</title>
      <link href="/2021/12/18/tool/git-note/"/>
      <url>/2021/12/18/tool/git-note/</url>
      
        <content type="html"><![CDATA[<h2 id="命令脑图"><a href="#命令脑图" class="headerlink" title="命令脑图"></a>命令脑图</h2><blockquote><p>鹅厂程序猿常用的 Git 命令思维导图</p></blockquote><img src="/2021/12/18/tool/git-note/git-notes-0000.svg" class="" title="脑图"><h2 id="命令详解"><a href="#命令详解" class="headerlink" title="命令详解"></a>命令详解</h2><h3 id="配置级别"><a href="#配置级别" class="headerlink" title="配置级别"></a>配置级别</h3><p><code>git</code>的配置级别主要分为三类</p><blockquote><ol><li>仓库级别 <code>local</code> [优先级最高]<ol><li><code>git</code> 仓库级别对应的配置文件是当前仓库下的<code>.git/config</code>，默认是隐藏的 </li><li><strong><code>git config --local -l</code></strong>  or <strong><code>git config --local --list</code></strong>  [查看仓库级别的配置] </li><li><code>git config --local -e</code> 编辑仓库级别配置文件</li></ol></li><li>用户级别 <code>global</code>[优先级次之]<ol><li><code>git</code> 用户级别对应的配置文件是用户宿主目录下的<code>~/.gitconfig</code>（<code>C:\Users\XXX\.gitconfig</code>）</li><li>**<code>git config --global -l</code>**or <strong><code>git config --global --list</code></strong>  [查看用户级别的配置]</li><li><code>git config --global -e</code> 编辑用户级别配置文件</li></ol></li><li>系统级别 <code>system</code>[优先级最低]<ol><li><code>git</code>系统级别对应的配置文件是git安装目录下的<code> /etc/gitconfig</code>（<code>[install-path]\mingw64\etc\gitconfig</code>）</li><li><strong><code>git config --system -l</code></strong> or <strong><code>git config --system --list</code></strong> [查看系统级别的配置</li><li><code>git config --system -e</code> 编辑系统级别配置文件</li></ol></li><li>查看全部<ol><li><strong><code>git config -l</code></strong> or <strong><code>git config --list</code></strong> </li><li>其中的分类为<ul><li><code>core.XXX</code>为仓库级配置</li><li><code>user.XXX</code>    为用户级配置</li><li><code>http.XXX</code>    为系统级配置</li></ul></li></ol></li></ol></blockquote><blockquote><p>添加邮箱和用户名</p><ul><li><code>git config --global user.email “XXX@xxx.com” </code>    # 用户级</li><li><code>git config --global user.name “XXX” </code>                # 用户级</li></ul></blockquote><h2 id="功能性配置"><a href="#功能性配置" class="headerlink" title="功能性配置"></a>功能性配置</h2><h3 id="通用SSH配置"><a href="#通用SSH配置" class="headerlink" title="通用SSH配置"></a>通用SSH配置</h3><ol><li>首先确保用户名与账号的配置完成</li><li>生成密钥对</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"> $ ssh-keygen -t rsa -C "xxx@xxx.com" # 生成秘钥# 之后会又两个输入选项：# 1、第一个是指定生成的密钥文件名(将会放在用户文件目录下)，如果不指定，则使用默认的文件名称# id_rsa.pub  公钥id_rsa  私钥# 2、第二个是指定验证密码，不输入则默认为空。设置密码后，每次使用git时都需要输入在此设置的密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/12/18/tool/git-note/git-notes-0001.png" class="" title="生成密钥"><ol start="3"><li><p>进入到用户宿主目录下，获取公钥 <code>cat ~/.ssh/id_rsa.pub</code>(也可以直接访问id_rsa.pub文件查看)</p></li><li><p>进入github或者其他版本管理系统，添加此处获得的公钥</p></li><li><p>测试访问 <code>ssh -T git@github.com</code> </p><p>​返回如下提示则配置成功 <code>Hi xxxx! You've successfully authenticated, but GitHub does not provide shell access.</code></p><p>​<img src="/2021/12/18/tool/git-note/git-notes-0002.png" class="" title="测试连接效果"></p></li><li><p>修改<code>git</code>的<code>remote url</code></p></li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 查看当前的 remote url$ git remote -vorigin https://github.com/XXX/XXXproject.git (fetch) # 此结果说明 使用https协议进行访问origin https://github.com/XXX/XXXproject.git (push)#  复制SSH链接，进行调整$ git remote set-url origin git@github.com:XXX/XXXproject.git# 之后可再次使用查看 remote url 会发现已经被修改$ git remote -vorigin  git@github.com:XXX/XXXproject.git (fetch)  # git开头则表示是git协议origin  git@github.com:XXX/XXXproject.git (push)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多仓库源多密钥设置"><a href="#多仓库源多密钥设置" class="headerlink" title="多仓库源多密钥设置"></a>多仓库源多密钥设置</h3><p>通过在配置项中指定服务器与对应的密钥对，来达到在同一个机器上对不同的git仓库使用不同的密钥对进行匹配。</p><blockquote><p>注意，这里指定的证书文</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">% vim ~/.ssh/config# 在config文件中增加一下内容Host github.comHostName github.comUser 账号IdentityFile &lt;自定义的目录&gt;/id_rsaIdentitiesOnly yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.processon.com/view/link/5c6e2755e4b03334b523ffc3#map">脑图来源</a>：<a href="https://www.processon.com/view/link/5c6e2755e4b03334b523ffc3#map">https://www.processon.com/view/link/5c6e2755e4b03334b523ffc3#map</a></p>]]></content>
      
      
      <categories>
          
          <category> tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> tool </tag>
            
            <tag> github </tag>
            
            <tag> configuration </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/12/12/helloworld/hello-world/"/>
      <url>/2021/12/12/helloworld/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> HelloWorld </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HelloWorld </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
